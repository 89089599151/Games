"""Truth or Dare offline host bot."""

import asyncio
import os
import random
from dataclasses import dataclass, field
from typing import Dict, List, Optional, Set, Tuple

from aiogram import Bot, Dispatcher, F
# Aiogram 3.7+ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç DefaultBotProperties, –Ω–æ –≤ 3.2 –µ–≥–æ –Ω–µ—Ç,
# –ø–æ—ç—Ç–æ–º—É –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å –∑–∞–ø–∞—Å–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
try:
    from aiogram.client.default import DefaultBotProperties
except ImportError:  # aiogram<=3.6
    DefaultBotProperties = None  # type: ignore[assignment]
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command, CommandStart
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
if not BOT_TOKEN:
    raise SystemExit(
        "‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "BOT_TOKEN=123:ABC python bot.py"
    )

AGE_LEVELS = ["0+", "12+", "16+", "18+"]
AGE_ICONS = {
    "0+": "üßí",
    "12+": "üßë",
    "16+": "‚ö†Ô∏è",
    "18+": "üî•",
}
AGE_ORDER = {age: index for index, age in enumerate(AGE_LEVELS)}

CATEGORIES = {
    "–õ—ë–≥–∫–æ–µ": "üéà",
    "–î—Ä—É–∑—å—è": "ü§ù",
    "–†–æ–º–∞–Ω—Ç–∏–∫–∞": "üíò",
    "–ñ–µ—Å—Ç—å": "üí•",
}

DEFAULT_DECK: List[Dict[str, str]] = [
    {"id": "light-truth-01", "type": "truth", "category": "–õ—ë–≥–∫–æ–µ", "age": "0+", "text": "–ö–∞–∫–æ–π –º–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–º–µ—à–∏—Ç —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?"},
    {"id": "light-truth-02", "type": "truth", "category": "–õ—ë–≥–∫–æ–µ", "age": "0+", "text": "–ù–∞–∑–æ–≤–∏ –∑–∞–Ω—è—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—Å–µ–≥–¥–∞ –ø–æ–¥–Ω–∏–º–∞–µ—Ç —Ç–µ–±–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ."},
    {"id": "light-truth-03", "type": "truth", "category": "–õ—ë–≥–∫–æ–µ", "age": "12+", "text": "–ï—Å–ª–∏ –±—ã —Ç—ã –º–æ–≥ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –≤—ã—É—á–∏—Ç—å –ª—é–±–æ–π –Ω–∞–≤—ã–∫, —á—Ç–æ –±—ã —ç—Ç–æ –±—ã–ª–æ?"},
    {"id": "light-dare-01", "type": "dare", "category": "–õ—ë–≥–∫–æ–µ", "age": "0+", "text": "–ò–∑–æ–±—Ä–∞–∑–∏ –Ω–∞ 10 —Å–µ–∫—É–Ω–¥ –≥–µ—Ä–æ—è –ª—é–±–∏–º–æ–≥–æ –º—É–ª—å—Ç—Ñ–∏–ª—å–º–∞."},
    {"id": "light-dare-02", "type": "dare", "category": "–õ—ë–≥–∫–æ–µ", "age": "0+", "text": "–°–∫–∞–∂–∏ —Ç—Ä–∏ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∞ –ª—é–¥—è–º —Ä—è–¥–æ–º, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—è—Å—å."},
    {"id": "light-dare-03", "type": "dare", "category": "–õ—ë–≥–∫–æ–µ", "age": "12+", "text": "–ü—Ä–∏–¥—É–º–∞–π —Å–º–µ—à–Ω—É—é –ø–æ–¥–ø–∏—Å—å –¥–ª—è –±–ª–∏–∂–∞–π—à–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞."},
    {"id": "friends-truth-01", "type": "truth", "category": "–î—Ä—É–∑—å—è", "age": "0+", "text": "–ö—Ç–æ –∏–∑ —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ —É–º—É–¥—Ä—è–µ—Ç—Å—è —Ç–µ–±—è —É–¥–∏–≤–ª—è—Ç—å —á–∞—â–µ –≤—Å–µ–≥–æ?"},
    {"id": "friends-truth-02", "type": "truth", "category": "–î—Ä—É–∑—å—è", "age": "12+", "text": "–ö–∞–∫–æ–π –æ–±—â–∏–π –º–æ–º–µ–Ω—Ç –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ —Ç—ã –±—ã –ø–æ–≤—Ç–æ—Ä–∏–ª –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?"},
    {"id": "friends-truth-03", "type": "truth", "category": "–î—Ä—É–∑—å—è", "age": "16+", "text": "–ß—Ç–æ —Ç–µ–±–µ –ª–µ–≥—á–µ ‚Äì –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–º–æ—â—å –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –µ—ë –ø–µ—Ä–≤—ã–º?"},
    {"id": "friends-dare-01", "type": "dare", "category": "–î—Ä—É–∑—å—è", "age": "0+", "text": "–°–æ—á–∏–Ω–∏ —Å–º–µ—à–Ω–æ–π –∫–æ–º–∞–Ω–¥–Ω—ã–π –¥–µ–≤–∏–∑ –∏ –ø—Ä–æ–∏–∑–Ω–µ—Å–∏ –µ–≥–æ –≤—Å–ª—É—Ö."},
    {"id": "friends-dare-02", "type": "dare", "category": "–î—Ä—É–∑—å—è", "age": "12+", "text": "–°–¥–µ–ª–∞–π –º–∏–Ω–∏-—Ç–æ—Å—Ç –∑–∞ –¥—Ä—É–∂–±—É –Ω–∞ 15 —Å–µ–∫—É–Ω–¥."},
    {"id": "friends-dare-03", "type": "dare", "category": "–î—Ä—É–∑—å—è", "age": "16+", "text": "–ü—Ä–∏–¥—É–º–∞–π –Ω–æ–≤—ã–π –æ–±—â–∏–π —Ä–∏—Ç—É–∞–ª –¥–ª—è –≤—Å–µ–π –∫–æ–º–ø–∞–Ω–∏–∏."},
    {"id": "romance-truth-01", "type": "truth", "category": "–†–æ–º–∞–Ω—Ç–∏–∫–∞", "age": "12+", "text": "–ö–∞–∫–æ–π –º–∏–ª—ã–π –∂–µ—Å—Ç –≤—Å–µ–≥–¥–∞ –≤—ã–∑—ã–≤–∞–µ—Ç —É —Ç–µ–±—è —É–ª—ã–±–∫—É?"},
    {"id": "romance-truth-02", "type": "truth", "category": "–†–æ–º–∞–Ω—Ç–∏–∫–∞", "age": "16+", "text": "–ß—Ç–æ —Ç—ã —Ü–µ–Ω–∏—à—å –≤ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–º–µ–Ω—Ç–∞—Ö –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?"},
    {"id": "romance-truth-03", "type": "truth", "category": "–†–æ–º–∞–Ω—Ç–∏–∫–∞", "age": "18+", "text": "üî• –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–∞–º–æ–º —Å–º–µ–ª–æ–º —Å–≤–∏–¥–∞–Ω–∏–∏, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—Ç–µ–ª –±—ã —É—Å—Ç—Ä–æ–∏—Ç—å."},
    {"id": "romance-dare-01", "type": "dare", "category": "–†–æ–º–∞–Ω—Ç–∏–∫–∞", "age": "12+", "text": "–°–∫–∞–∂–∏ –Ω–µ–∂–Ω—ã–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç —á–µ–ª–æ–≤–µ–∫—É —Å–ª–µ–≤–∞."},
    {"id": "romance-dare-02", "type": "dare", "category": "–†–æ–º–∞–Ω—Ç–∏–∫–∞", "age": "16+", "text": "–û–ø–∏—à–∏ –∏–¥–µ–∞–ª—å–Ω—ã–π –≤–µ—á–µ—Ä –Ω–∞ –¥–≤–æ–∏—Ö –≤ —Ç—Ä—ë—Ö —Ñ—Ä–∞–∑–∞—Ö."},
    {"id": "romance-dare-03", "type": "dare", "category": "–†–æ–º–∞–Ω—Ç–∏–∫–∞", "age": "18+", "text": "üî• –ü—Ä–∏–¥—É–º–∞–π –ø–∏–∫–∞–Ω—Ç–Ω–æ–µ, –Ω–æ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ –¥–ª—è –ª—é–±–æ–≥–æ –∏–≥—Ä–æ–∫–∞."},
    {"id": "extreme-truth-01", "type": "truth", "category": "–ñ–µ—Å—Ç—å", "age": "16+", "text": "–†–∞—Å—Å–∫–∞–∂–∏ –æ –º–æ–º–µ–Ω—Ç–µ, –∫–æ–≥–¥–∞ –ø—Ä–∏—à–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ –∑–æ–Ω—ã –∫–æ–º—Ñ–æ—Ä—Ç–∞."},
    {"id": "extreme-truth-02", "type": "truth", "category": "–ñ–µ—Å—Ç—å", "age": "18+", "text": "üî• –ö–∞–∫–æ–π —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç—É–ø–æ–∫ —Ç—ã –¥–æ —Å–∏—Ö –ø–æ—Ä –≤—Å–ø–æ–º–∏–Ω–∞–µ—à—å —Å —É–ª—ã–±–∫–æ–π?"},
    {"id": "extreme-truth-03", "type": "truth", "category": "–ñ–µ—Å—Ç—å", "age": "18+", "text": "üî• –ï—Å—Ç—å –ª–∏ –º–µ—á—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ç—ã –ø–æ–∫–∞ –Ω–µ —Ä–µ—à–∞–µ—à—å—Å—è?"},
    {"id": "extreme-dare-01", "type": "dare", "category": "–ñ–µ—Å—Ç—å", "age": "16+", "text": "–°–¥–µ–ª–∞–π —Ä–µ—à–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ—Å—Ç –∑–∞ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è."},
    {"id": "extreme-dare-02", "type": "dare", "category": "–ñ–µ—Å—Ç—å", "age": "16+", "text": "–ü—Ä–∏–¥—É–º–∞–π —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã—Ö–æ–¥–∞ –∫–æ–º–ø–∞–Ω–∏–∏."},
    {"id": "extreme-dare-03", "type": "dare", "category": "–ñ–µ—Å—Ç—å", "age": "18+", "text": "üî• –ü–æ–¥–µ–ª–∏—Å—å –∑–∞–±–∞–≤–Ω–æ–π –≤–∑—Ä–æ—Å–ª–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–∏–ª–∏—á–∏—è."},
]

HELP_TEXT = (
    "‚ÑπÔ∏è <b>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å –æ—Ñ–ª–∞–π–Ω</b>\n"
    "1. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É –∏ –¥–æ–±–∞–≤—å—Ç–µ –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥–æ–π <code>/addplayer –ò–º—è</code> –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—è –∏–º–µ–Ω–∞ —Ç–µ–∫—Å—Ç–æ–º.\n"
    "2. –ö–æ–≥–¥–∞ —Å–ø–∏—Å–æ–∫ –≥–æ—Ç–æ–≤, –Ω–∞–∂–º–∏—Ç–µ ¬´‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç¬ª ‚Äî –±–æ—Ç –≤—ã–±–µ—Ä–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞.\n"
    "3. –£—á–∞—Å—Ç–Ω–∏–∫ –≤—ã–±–∏—Ä–∞–µ—Ç ¬´–ü—Ä–∞–≤–¥–∞¬ª –∏–ª–∏ ¬´–î–µ–π—Å—Ç–≤–∏–µ¬ª –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏.\n"
    "4. –ù–∞–∂–º–∏—Ç–µ ¬´‚û°Ô∏è –î–∞–ª–µ–µ¬ª, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É, –∏–ª–∏ ¬´üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å¬ª, —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É.\n"
    "5. –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —É—Ä–æ–≤–µ–Ω—å, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –æ—á–∫–∏.\n"
)

WELCOME_TEXT = (
    "üëã <b>–ü—Ä–∏–≤–µ—Ç! –Ø –≤–µ–¥—É—â–∏–π –∏–≥—Ä—ã ¬´–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –î–µ–π—Å—Ç–≤–∏–µ¬ª –¥–ª—è –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.</b>\n\n"
    "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É, –¥–æ–±–∞–≤—å—Ç–µ –∏–≥—Ä–æ–∫–æ–≤ –∏ –ø–æ–∑–≤–æ–ª—å—Ç–µ –º–Ω–µ –≤–µ—Å—Ç–∏ —Ä–∞—É–Ω–¥—ã –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Å–ø–∞–º–∞.\n"
)


@dataclass
class GameState:
    chat_id: int
    host_id: int
    host_name: str
    players: List[str] = field(default_factory=list)
    scores: Dict[str, int] = field(default_factory=dict)
    is_running: bool = False
    awaiting_choice: bool = False
    current_player: Optional[str] = None
    current_card: Optional[Dict[str, str]] = None
    round_index: int = 0
    used_cards: Set[str] = field(default_factory=set)
    age_level: str = "0+"
    categories: Set[str] = field(default_factory=lambda: set(CATEGORIES))
    scoring_enabled: bool = False
    panel_message_id: Optional[int] = None

    def reset_for_round(self) -> None:
        self.current_card = None
        self.awaiting_choice = False

    def ensure_player_entry(self, name: str) -> None:
        if self.scoring_enabled and name not in self.scores:
            self.scores[name] = 0

    def remove_player(self, name: str) -> bool:
        normalized = name.lower()
        for stored in list(self.players):
            if stored.lower() == normalized:
                self.players.remove(stored)
                self.scores.pop(stored, None)
                if self.current_player == stored:
                    self.current_player = None
                return True
        return False


GAMES: Dict[int, GameState] = {}


def get_or_create_game(chat_id: int, host_id: int, host_name: str) -> GameState:
    game = GAMES.get(chat_id)
    if game is None:
        game = GameState(chat_id=chat_id, host_id=host_id, host_name=host_name)
        game.players.append(host_name)
        game.ensure_player_entry(host_name)
        GAMES[chat_id] = game
    return game


def reset_game(chat_id: int) -> Optional[GameState]:
    return GAMES.pop(chat_id, None)


def build_main_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üéÆ –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É", callback_data="menu:create")],
            [InlineKeyboardButton(text="‚ÑπÔ∏è –ü—Ä–∞–≤–∏–ª–∞", callback_data="menu:help")],
        ]
    )


def build_lobby_markup(game: GameState) -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton(text="‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç", callback_data="game:start")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data="game:add")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings:open")],
        [InlineKeyboardButton(text="üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="game:end")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)


def build_settings_menu(game: GameState) -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton(text=f"–í–æ–∑—Ä–∞—Å—Ç: {AGE_ICONS[game.age_level]} {game.age_level}", callback_data="settings:age")],
        [InlineKeyboardButton(text="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="settings:categories")],
        [
            InlineKeyboardButton(
                text="–û—á–∫–∏: –≤–∫–ª—é—á–µ–Ω—ã" if game.scoring_enabled else "–û—á–∫–∏: –≤—ã–∫–ª—é—á–µ–Ω—ã",
                callback_data="settings:score_toggle",
            )
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings:back")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)


def build_age_menu(game: GameState) -> InlineKeyboardMarkup:
    rows: List[List[InlineKeyboardButton]] = []
    for age in AGE_LEVELS:
        prefix = "‚úÖ" if age == game.age_level else "‚ñ´Ô∏è"
        rows.append(
            [
                InlineKeyboardButton(
                    text=f"{prefix} {AGE_ICONS[age]} {age}",
                    callback_data=f"settings:set_age:{age}",
                )
            ]
        )
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings:open")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def build_categories_menu(game: GameState) -> InlineKeyboardMarkup:
    rows: List[List[InlineKeyboardButton]] = []
    for name, emoji in CATEGORIES.items():
        active = "‚úÖ" if name in game.categories else "‚ñ´Ô∏è"
        rows.append(
            [
                InlineKeyboardButton(
                    text=f"{active} {emoji} {name}", callback_data=f"settings:toggle_category:{name}"
                )
            ]
        )
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings:open")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def build_choice_markup() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üß† –ü—Ä–∞–≤–¥–∞", callback_data="round:truth"), InlineKeyboardButton(text="üé¨ –î–µ–π—Å—Ç–≤–∏–µ", callback_data="round:dare")],
            [InlineKeyboardButton(text="üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="game:end")],
        ]
    )


def build_post_card_markup(game: GameState) -> InlineKeyboardMarkup:
    rows: List[List[InlineKeyboardButton]] = []
    if game.scoring_enabled:
        rows.append([InlineKeyboardButton(text="‚úÖ –ó–∞—Å—á–∏—Ç–∞—Ç—å –æ—á–∫–æ", callback_data="round:score")])
    rows.append([InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="round:next")])
    rows.append([InlineKeyboardButton(text="üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="game:end")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def render_players(game: GameState) -> str:
    if not game.players:
        return "–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ –∏–≥—Ä–æ–∫–æ–≤, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∏—Ö –∏–º–µ–Ω–∞."
    lines = ["üë• <b>–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:</b>"]
    for index, name in enumerate(game.players, start=1):
        crown = " üëë" if name == game.host_name else ""
        score = f" ‚Äî {game.scores.get(name, 0)} –æ—á–∫." if game.scoring_enabled else ""
        lines.append(f"{index}. {name}{crown}{score}")
    return "\n".join(lines)


def render_lobby(game: GameState) -> str:
    parts = [
        "üéÆ <b>–õ–æ–±–±–∏ –∏–≥—Ä—ã</b>",
        f"–•–æ—Å—Ç: {game.host_name} üëë",
        render_players(game),
        "\n–î–æ–±–∞–≤—å—Ç–µ –∏–≥—Ä–æ–∫–æ–≤ —á–µ—Ä–µ–∑ /addplayer –ò–º—è –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–≤ –∏–º—è –≤ —á–∞—Ç.",
    ]
    return "\n".join(parts)


def render_settings_summary(game: GameState) -> str:
    categories = ", ".join(f"{CATEGORIES[name]} {name}" for name in sorted(game.categories))
    return (
        "‚öôÔ∏è <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {AGE_ICONS[game.age_level]} {game.age_level}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {categories}\n"
        f"–û—á–∫–∏: {'–≤–∫–ª—é—á–µ–Ω—ã' if game.scoring_enabled else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}"
    )


def choose_next_player(game: GameState) -> Optional[str]:
    if not game.players:
        return None
    candidates = game.players.copy()
    if game.current_player and len(candidates) > 1:
        candidates = [name for name in candidates if name != game.current_player]
    player = random.choice(candidates)
    game.current_player = player
    game.awaiting_choice = True
    return player


def filtered_cards(game: GameState, card_type: str) -> List[Dict[str, str]]:
    allowed_ages = {
        card_age for card_age in AGE_LEVELS if AGE_ORDER[card_age] <= AGE_ORDER[game.age_level]
    }
    result: List[Dict[str, str]] = []
    for card in DEFAULT_DECK:
        if card["type"] != card_type:
            continue
        if card["category"] not in game.categories:
            continue
        if card["age"] not in allowed_ages:
            continue
        result.append(card)
    return result


def pick_card(game: GameState, card_type: str) -> Tuple[Optional[Dict[str, str]], bool]:
    cards = filtered_cards(game, card_type)
    if not cards:
        return None, False
    fresh_cards = [card for card in cards if card["id"] not in game.used_cards]
    recycled = False
    if not fresh_cards:
        game.used_cards.clear()
        fresh_cards = cards
        recycled = True
    card = random.choice(fresh_cards)
    game.used_cards.add(card["id"])
    return card, recycled


def lobby_needs_update(game: GameState) -> bool:
    return game.panel_message_id is not None


def scoreboard_text(game: GameState) -> str:
    if not game.scoring_enabled or not game.scores:
        return "–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—á–∫–∏ –Ω–µ –≤–µ–ª–∏ –∏–ª–∏ –Ω–∏–∫—Ç–æ –∏—Ö –Ω–µ –∑–∞—Ä–∞–±–æ—Ç–∞–ª."
    ordered = sorted(game.scores.items(), key=lambda item: item[1], reverse=True)
    lines = ["üèÜ <b>–§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á—ë—Ç</b>"]
    for position, (name, score) in enumerate(ordered, start=1):
        crown = " üëë" if position == 1 else ""
        lines.append(f"{position}. {name}{crown} ‚Äî {score}")
    return "\n".join(lines)


def welcome_text_with_menu() -> Dict[str, object]:
    return {"text": WELCOME_TEXT, "reply_markup": build_main_menu()}


def ensure_host(callback: CallbackQuery, game: GameState) -> bool:
    if callback.from_user and callback.from_user.id == game.host_id:
        return True
    asyncio.create_task(
        callback.answer("–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–Ω–æ–ø–∫—É.", show_alert=False)
    )
    return False


bot_defaults: Dict[str, object] = {}
if DefaultBotProperties is not None:
    bot_defaults["default"] = DefaultBotProperties(parse_mode="HTML")
else:
    bot_defaults["parse_mode"] = "HTML"

bot = Bot(token=BOT_TOKEN, **bot_defaults)
dp = Dispatcher()


@dp.message(CommandStart())
async def handle_start(message: Message) -> None:
    game = GAMES.get(message.chat.id)
    if game and game.is_running:
        await message.answer("–ò–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        return
    await message.answer(**welcome_text_with_menu())


@dp.message(Command("help"))
async def handle_help(message: Message) -> None:
    await message.answer(HELP_TEXT)


@dp.message(Command("newgame"))
async def handle_new_game(message: Message) -> None:
    await create_or_reset_game(message)


async def create_or_reset_game(message: Message) -> None:
    chat_id = message.chat.id
    host_id = message.from_user.id if message.from_user else 0
    host_name = message.from_user.full_name if message.from_user else "–•–æ—Å—Ç"
    game = get_or_create_game(chat_id, host_id, host_name)
    game.host_id = host_id
    game.host_name = host_name
    game.is_running = False
    game.awaiting_choice = False
    game.current_player = None
    game.current_card = None
    game.round_index = 0
    game.used_cards.clear()
    game.panel_message_id = None
    if host_name not in game.players:
        game.players.insert(0, host_name)
    game.ensure_player_entry(host_name)
    await message.answer("üé≤ –ù–æ–≤–∞—è –∏–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞! –Ø —É–∂–µ –¥–æ–±–∞–≤–∏–ª —Ö–æ—Å—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤.")
    text = render_lobby(game)
    sent = await message.answer(text, reply_markup=build_lobby_markup(game))
    game.panel_message_id = sent.message_id


@dp.message(Command("addplayer"))
async def handle_add_player_command(message: Message) -> None:
    name = message.text.split(maxsplit=1)
    if len(name) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /addplayer –ò–º—è")
        return
    await add_player(message, name[1].strip())


async def add_player(message: Message, raw_name: str) -> None:
    chat_id = message.chat.id
    game = GAMES.get(chat_id)
    if not game:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /newgame –∏–ª–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é.")
        return
    if message.from_user and message.from_user.id != game.host_id:
        await message.answer("–î–æ–±–∞–≤–ª—è—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Ö–æ—Å—Ç.")
        return
    name = raw_name.strip()
    if not name:
        await message.answer("–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    if any(existing.lower() == name.lower() for existing in game.players):
        await message.answer("–¢–∞–∫–æ–π –∏–≥—Ä–æ–∫ —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.")
        return
    game.players.append(name)
    game.ensure_player_entry(name)
    await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∏–≥—Ä–æ–∫: {name}")
    if lobby_needs_update(game):
        await update_lobby_panel(message.chat.id, game)


async def update_lobby_panel(chat_id: int, game: GameState) -> None:
    if game.panel_message_id is None:
        return
    try:
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=game.panel_message_id,
            text=render_lobby(game),
            reply_markup=build_lobby_markup(game),
        )
    except TelegramBadRequest as exc:
        if "message is not modified" not in str(exc).lower():
            raise


@dp.message()
async def handle_plain_text(message: Message) -> None:
    if not message.text or message.text.startswith("/"):
        return
    game = GAMES.get(message.chat.id)
    if not game or game.is_running:
        return
    await add_player(message, message.text.strip())


@dp.callback_query(F.data == "menu:create")
async def handle_menu_create(callback: CallbackQuery) -> None:
    message = callback.message
    if not message:
        await callback.answer()
        return
    chat_id = message.chat.id
    from_user = callback.from_user
    game = get_or_create_game(chat_id, from_user.id if from_user else 0, from_user.full_name if from_user else "–•–æ—Å—Ç")
    game.host_id = from_user.id if from_user else 0
    game.host_name = from_user.full_name if from_user else "–•–æ—Å—Ç"
    game.players = [game.host_name]
    game.scores = {game.host_name: 0} if game.scoring_enabled else {}
    game.is_running = False
    game.awaiting_choice = False
    game.current_player = None
    game.current_card = None
    game.round_index = 0
    game.used_cards.clear()
    game.panel_message_id = message.message_id
    await callback.answer("–ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞. –î–æ–±–∞–≤—å—Ç–µ –∏–≥—Ä–æ–∫–æ–≤!")
    await bot.edit_message_text(
        chat_id=chat_id,
        message_id=message.message_id,
        text=render_lobby(game),
        reply_markup=build_lobby_markup(game),
    )


@dp.callback_query(F.data == "menu:help")
async def handle_menu_help(callback: CallbackQuery) -> None:
    await callback.answer()
    if callback.message:
        await callback.message.answer(HELP_TEXT)


@dp.callback_query(F.data == "game:add")
async def handle_game_add(callback: CallbackQuery) -> None:
    game = GAMES.get(callback.message.chat.id) if callback.message else None
    if not game:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É.")
        return
    if not ensure_host(callback, game):
        return
    await callback.answer("–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º—è –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addplayer –ò–º—è.")


@dp.callback_query(F.data == "game:start")
async def handle_game_start(callback: CallbackQuery) -> None:
    message = callback.message
    if not message:
        await callback.answer()
        return
    game = GAMES.get(message.chat.id)
    if not game:
        await callback.answer("–°–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ.")
        return
    if not ensure_host(callback, game):
        return
    if len(game.players) < 2:
        await callback.answer("–î–æ–±–∞–≤—å—Ç–µ –º–∏–Ω–∏–º—É–º –¥–≤—É—Ö –∏–≥—Ä–æ–∫–æ–≤.", show_alert=True)
        return
    game.is_running = True
    game.round_index = 0
    game.used_cards.clear()
    game.scores = {name: 0 for name in game.players} if game.scoring_enabled else {}
    await callback.answer()
    await send_next_player_prompt(message.chat.id, game)


async def send_next_player_prompt(chat_id: int, game: GameState) -> None:
    player = choose_next_player(game)
    if not player:
        await bot.send_message(chat_id, "–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤. –î–æ–±–∞–≤—å—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        return
    game.round_index += 1
    await bot.send_message(
        chat_id,
        (
            f"üéØ <b>–†–∞—É–Ω–¥ {game.round_index}</b>\n"
            f"–°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –ø–∞–ª –Ω–∞: <b>{player}</b>.\n"
            "–í—ã–±–∏—Ä–∞–π —Ä–µ–∂–∏–º!"
        ),
        reply_markup=build_choice_markup(),
    )


@dp.callback_query(F.data.in_({"round:truth", "round:dare"}))
async def handle_round_choice(callback: CallbackQuery) -> None:
    message = callback.message
    if not message:
        await callback.answer()
        return
    game = GAMES.get(message.chat.id)
    if not game:
        await callback.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    if not ensure_host(callback, game):
        return
    if not game.awaiting_choice or not game.current_player:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ä–∞—É–Ω–¥.")
        return
    card_type = "truth" if callback.data == "round:truth" else "dare"
    card, recycled = pick_card(game, card_type)
    if card is None:
        await callback.answer("–ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ò–∑–º–µ–Ω–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç.", show_alert=True)
        return
    game.current_card = card
    game.awaiting_choice = False
    await callback.answer()
    if recycled:
        await bot.send_message(
            message.chat.id,
            "–ö–æ–ª–æ–¥–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å ‚Äî –ø–µ—Ä–µ—Ç–∞—Å–æ–≤–∞–ª –∑–∞–¥–∞–Ω–∏—è –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ!",
        )
    text = (
        f"{('üß† –ü—Ä–∞–≤–¥–∞' if card_type == 'truth' else 'üé¨ –î–µ–π—Å—Ç–≤–∏–µ')} –¥–ª—è <b>{game.current_player}</b>:\n"
        f"{card['text']}"
    )
    await bot.send_message(message.chat.id, text, reply_markup=build_post_card_markup(game))


@dp.callback_query(F.data == "round:score")
async def handle_round_score(callback: CallbackQuery) -> None:
    message = callback.message
    if not message:
        await callback.answer()
        return
    game = GAMES.get(message.chat.id)
    if not game or not game.scoring_enabled:
        await callback.answer()
        return
    if not ensure_host(callback, game):
        return
    if not game.current_player:
        await callback.answer("–û—á–∫–æ –Ω–µ –∫ –∫–æ–º—É –ø—Ä–∏–º–µ–Ω–∏—Ç—å.")
        return
    game.scores[game.current_player] = game.scores.get(game.current_player, 0) + 1
    await callback.answer("–û—á–∫–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    await bot.send_message(message.chat.id, f"üî¢ –£ {game.current_player} —Ç–µ–ø–µ—Ä—å {game.scores[game.current_player]} –æ—á–∫–æ(–æ–≤).")
    if lobby_needs_update(game):
        await update_lobby_panel(message.chat.id, game)


@dp.callback_query(F.data == "round:next")
async def handle_round_next(callback: CallbackQuery) -> None:
    message = callback.message
    if not message:
        await callback.answer()
        return
    game = GAMES.get(message.chat.id)
    if not game:
        await callback.answer()
        return
    if not ensure_host(callback, game):
        return
    game.reset_for_round()
    await callback.answer("–°–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫!")
    await send_next_player_prompt(message.chat.id, game)


@dp.callback_query(F.data == "game:end")
async def handle_game_end(callback: CallbackQuery) -> None:
    message = callback.message
    if not message:
        await callback.answer()
        return
    game = GAMES.get(message.chat.id)
    if not game:
        await callback.answer("–ò–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return
    if not ensure_host(callback, game):
        return
    summary = scoreboard_text(game)
    reset_game(message.chat.id)
    await callback.answer("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    await bot.send_message(message.chat.id, summary)
    await bot.send_message(message.chat.id, **welcome_text_with_menu())


@dp.callback_query(F.data == "settings:open")
async def handle_settings_open(callback: CallbackQuery) -> None:
    message = callback.message
    if not message:
        await callback.answer()
        return
    game = GAMES.get(message.chat.id)
    if not game:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É.")
        return
    if not ensure_host(callback, game):
        return
    await callback.answer()
    await bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=message.message_id,
        text=render_settings_summary(game),
        reply_markup=build_settings_menu(game),
    )


@dp.callback_query(F.data == "settings:back")
async def handle_settings_back(callback: CallbackQuery) -> None:
    message = callback.message
    if not message:
        await callback.answer()
        return
    game = GAMES.get(message.chat.id)
    if not game:
        await callback.answer()
        return
    if not ensure_host(callback, game):
        return
    await callback.answer()
    await bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=message.message_id,
        text=render_lobby(game),
        reply_markup=build_lobby_markup(game),
    )


@dp.callback_query(F.data == "settings:categories")
async def handle_settings_categories(callback: CallbackQuery) -> None:
    message = callback.message
    if not message:
        await callback.answer()
        return
    game = GAMES.get(message.chat.id)
    if not game:
        await callback.answer()
        return
    if not ensure_host(callback, game):
        return
    await callback.answer()
    await bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∑–∞–¥–∞–Ω–∏–π:",
        reply_markup=build_categories_menu(game),
    )


@dp.callback_query(F.data == "settings:age")
async def handle_settings_age(callback: CallbackQuery) -> None:
    message = callback.message
    if not message:
        await callback.answer()
        return
    game = GAMES.get(message.chat.id)
    if not game:
        await callback.answer()
        return
    if not ensure_host(callback, game):
        return
    await callback.answer()
    await bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —É—Ä–æ–≤–µ–Ω—å:",
        reply_markup=build_age_menu(game),
    )


@dp.callback_query(F.data.startswith("settings:set_age:"))
async def handle_set_age(callback: CallbackQuery) -> None:
    message = callback.message
    if not message:
        await callback.answer()
        return
    game = GAMES.get(message.chat.id)
    if not game:
        await callback.answer()
        return
    if not ensure_host(callback, game):
        return
    age = callback.data.split(":")[-1]
    if age not in AGE_LEVELS:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç.")
        return
    game.age_level = age
    await callback.answer(f"–í—ã–±—Ä–∞–Ω–æ: {age}")
    await bot.edit_message_reply_markup(
        chat_id=message.chat.id,
        message_id=message.message_id,
        reply_markup=build_age_menu(game),
    )


@dp.callback_query(F.data.startswith("settings:toggle_category:"))
async def handle_toggle_category(callback: CallbackQuery) -> None:
    message = callback.message
    if not message:
        await callback.answer()
        return
    game = GAMES.get(message.chat.id)
    if not game:
        await callback.answer()
        return
    if not ensure_host(callback, game):
        return
    category = callback.data.split(":")[-1]
    if category not in CATEGORIES:
        await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    if category in game.categories and len(game.categories) == 1:
        await callback.answer("–ù–µ–ª—å–∑—è –æ—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.", show_alert=True)
        return
    if category in game.categories:
        game.categories.remove(category)
        await callback.answer(f"–£–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category}.")
    else:
        game.categories.add(category)
        await callback.answer(f"–î–æ–±–∞–≤–∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category}.")
    await bot.edit_message_reply_markup(
        chat_id=message.chat.id,
        message_id=message.message_id,
        reply_markup=build_categories_menu(game),
    )


@dp.callback_query(F.data == "settings:score_toggle")
async def handle_score_toggle(callback: CallbackQuery) -> None:
    message = callback.message
    if not message:
        await callback.answer()
        return
    game = GAMES.get(message.chat.id)
    if not game:
        await callback.answer()
        return
    if not ensure_host(callback, game):
        return
    game.scoring_enabled = not game.scoring_enabled
    if not game.scoring_enabled:
        game.scores.clear()
    else:
        for name in game.players:
            game.scores.setdefault(name, 0)
    await callback.answer("–û—á–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    await bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=message.message_id,
        text=render_settings_summary(game),
        reply_markup=build_settings_menu(game),
    )
    if lobby_needs_update(game):
        await update_lobby_panel(message.chat.id, game)


async def main() -> None:
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        pass
