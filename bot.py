import asyncio
import random
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

# ==== –í–°–¢–ê–í–¨ –°–í–û–ô –¢–û–ö–ï–ù ====
TOKEN = "8415157646:AAFdYFNTBAqCWkDbA2Vp14NuxKO78RHJRdw"

# ==== –°–û–ó–î–ê–Å–ú –ë–û–¢–ê –ò –î–ò–°–ü–ï–¢–ß–ï–† ====
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# ==== –°–û–°–¢–û–Ø–ù–ò–Ø ====
class Game(StatesGroup):
    choose_category = State()
    set_player_count = State()
    get_player_names = State()
    in_game = State()

# ==== –ë–ê–ó–ê –í–û–ü–†–û–°–û–í ====
QUESTIONS = {
    "–õ–∞–π—Ç": {
        "truth": [
            "–ö–∞–∫–æ–µ —Ç–≤–æ—ë –ª—é–±–∏–º–æ–µ –±–ª—é–¥–æ?",
            "–ö–∞–∫–∞—è —É —Ç–µ–±—è —Å–∞–º–∞—è —Å—Ç—Ä–∞–Ω–Ω–∞—è –ø—Ä–∏–≤—ã—á–∫–∞?",
            "–ß—Ç–æ —Ç—ã –¥–µ–ª–∞–µ—à—å, –∫–æ–≥–¥–∞ –Ω–∏–∫—Ç–æ –Ω–µ –≤–∏–¥–∏—Ç?",
            "–ö–∞–∫–æ–π —É —Ç–µ–±—è –±—ã–ª —Å–∞–º—ã–π –Ω–µ–ª–æ–≤–∫–∏–π –º–æ–º–µ–Ω—Ç?"
        ],
        "dare": [
            "–°–¥–µ–ª–∞–π —Å–º–µ—à–Ω–æ–µ –ª–∏—Ü–æ üòÇ",
            "–ü—Ä–æ—á–∏—Ç–∞–π –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–≤–æ–∏—Ö —á–∞—Ç–æ–≤ üì±",
            "–ü–æ–∫–∞–∂–∏ —Å–≤–æ—é —Å–∞–º—É—é –Ω–µ–ª–æ–≤–∫—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é üì∏",
            "–°–∫–∞–∂–∏ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –∏–≥—Ä–æ–∫—É —Å–ø—Ä–∞–≤–∞ üí¨"
        ]
    },
    "–î—Ä—É–∑—å—è": {
        "truth": [
            "–ö—Ç–æ –∏–∑ —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ —Ç–µ–±—è –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–Ω–∏–º–∞–µ—Ç?",
            "–ö–æ–º—É –±—ã —Ç—ã –¥–æ–≤–µ—Ä–∏–ª —Å–≤–æ–π —Å–µ–∫—Ä–µ—Ç?",
            "–ß—Ç–æ –±—ã —Ç—ã –∏–∑–º–µ–Ω–∏–ª –≤ –æ–¥–Ω–æ–º –∏–∑ –¥—Ä—É–∑–µ–π?",
            "–ö—Ç–æ —á–∞—â–µ –≤—Å–µ—Ö —Ç–µ–±—è –±–µ—Å–∏—Ç, –Ω–æ —Ç—ã –≤—Å—ë —Ä–∞–≤–Ω–æ –µ–≥–æ –ª—é–±–∏—à—å?"
        ],
        "dare": [
            "–ü–æ–∑–≤–æ–Ω–∏ –¥—Ä—É–≥—É –∏ —Å–∫–∞–∂–∏, —á—Ç–æ —Å–∫—É—á–∞–µ—à—å ‚òéÔ∏è",
            "–û—Ç–ø—Ä–∞–≤—å —Å–ª—É—á–∞–π–Ω—ã–π —ç–º–æ–¥–∑–∏ –≤ –ª—é–±–æ–π —á–∞—Ç üíå",
            "–ü—Ä–∏–¥—É–º–∞–π –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –Ω–æ–≤—ã–µ –∏–º–µ–Ω–∞ üòÑ",
            "–ò–∑–æ–±—Ä–∞–∑–∏ –ª—é–±–æ–≥–æ –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ ü§™"
        ]
    },
    "–†–æ–º–∞–Ω—Ç–∏–∫–∞": {
        "truth": [
            "–ö–æ–≥–æ –∏–∑ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç—ã —Å—á–∏—Ç–∞–µ—à—å —Å–∞–º—ã–º —Å–∏–º–ø–∞—Ç–∏—á–Ω—ã–º? üòâ",
            "–ö–æ–º—É —Ç—ã –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –≥–æ–≤–æ—Ä–∏–ª ¬´–ª—é–±–ª—é¬ª?",
            "–ö–∞–∫–æ–µ —Ç–≤–æ—ë –∏–¥–µ–∞–ª—å–Ω–æ–µ —Å–≤–∏–¥–∞–Ω–∏–µ?",
            "–¢—ã –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –≤–ª—é–±–ª—è–ª—Å—è(–∞—Å—å) –≤ –¥—Ä—É–≥–∞?"
        ],
        "dare": [
            "–û—Ç–ø—Ä–∞–≤—å —Å–µ—Ä–¥–µ—á–∫–æ ‚ù§Ô∏è –∫–æ–º—É-—Ç–æ –∏–∑ –∏–≥—Ä–æ–∫–æ–≤",
            "–°–∫–∞–∂–∏ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –∫–∞–∂–¥–æ–º—É –ø–æ –æ—á–µ—Ä–µ–¥–∏ üíò",
            "–ü–æ—Å–º–æ—Ç—Ä–∏ –≤ –≥–ª–∞–∑–∞ —Å–æ—Å–µ–¥—É —Å–ª–µ–≤–∞ 10 —Å–µ–∫—É–Ω–¥ üò≥",
            "–°–∫–∞–∂–∏ —á—Ç–æ-—Ç–æ –º–∏–ª–æ–µ –ª—é–±–æ–º—É –∏–≥—Ä–æ–∫—É ü•∞"
        ]
    },
    "–ñ–µ—Å—Ç—å": {
        "truth": [
            "–ö–∞–∫–æ–π —Ç–≤–æ–π —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π —Å—Ç—Ä–∞—Ö?",
            "–ß—Ç–æ —Ç—ã —Å–¥–µ–ª–∞–ª –±—ã, –µ—Å–ª–∏ –±—ã –∑–∞–≤—Ç—Ä–∞ –±—ã–ª –∫–æ–Ω–µ—Ü —Å–≤–µ—Ç–∞?",
            "–ö–æ–º—É –±—ã —Ç—ã –Ω–µ –¥–æ–≤–µ—Ä–∏–ª —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω?",
            "–ö–∞–∫–∞—è —Ç–≤–æ—è —Å–∞–º–∞—è –ø–æ–∑–æ—Ä–Ω–∞—è —Ç–∞–π–Ω–∞?"
        ],
        "dare": [
            "–°–¥–µ–ª–∞–π 10 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π –ø–µ—Ä–µ–¥ –≤—Å–µ–º–∏ üí™",
            "–ü–æ–∫–∞–∂–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ –≤ –≥–∞–ª–µ—Ä–µ–µ üì∑",
            "–ü—Ä–æ–∏–∑–Ω–µ—Å–∏ —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫—É –±–µ–∑ –æ—à–∏–±–æ–∫ üòú",
            "–°–∫–∞–∂–∏ ¬´–Ø –≥–µ–Ω–∏–π¬ª –≥—Ä–æ–º–∫–æ —Ç—Ä–∏ —Ä–∞–∑–∞ üòé"
        ]
    }
}

# ==== –°–õ–£–ñ–ï–ë–ù–´–ï –ö–õ–ê–í–ò–ê–¢–£–†–´ ====
def category_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–õ–∞–π—Ç"), KeyboardButton(text="–î—Ä—É–∑—å—è")],
            [KeyboardButton(text="–†–æ–º–∞–Ω—Ç–∏–∫–∞"), KeyboardButton(text="–ñ–µ—Å—Ç—å")]
        ],
        resize_keyboard=True
    )

def choice_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü—Ä–∞–≤–¥–∞ üîµ"), KeyboardButton(text="–î–µ–π—Å—Ç–≤–∏–µ üî¥")],
            [KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å üîÅ"), KeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å üèÅ")]
        ],
        resize_keyboard=True
    )

# ==== –°–¢–ê–†–¢ ====
@dp.message(Command("start"))
async def start_game(message: Message, state: FSMContext):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∏–≥—Ä–∞ '–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –î–µ–π—Å—Ç–≤–∏–µ'.\n–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤:",
        reply_markup=category_keyboard()
    )
    await state.set_state(Game.choose_category)

# ==== –í–´–ë–û–† –ö–ê–¢–ï–ì–û–†–ò–ò ====
@dp.message(Game.choose_category)
async def choose_category(message: Message, state: FSMContext):
    if message.text not in QUESTIONS:
        await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")
        return
    await state.update_data(category=message.text)
    await message.answer("–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –±—É–¥–µ—Ç –∏–≥—Ä–∞—Ç—å?")
    await state.set_state(Game.set_player_count)

# ==== –í–í–û–î –ö–û–õ–ò–ß–ï–°–¢–í–ê ====
@dp.message(Game.set_player_count)
async def set_count(message: Message, state: FSMContext):
    if not message.text.isdigit() or int(message.text) < 1:
        await message.answer("–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∏–≥—Ä–æ–∫–æ–≤ (1 –∏–ª–∏ –±–æ–ª—å—à–µ).")
        return
    count = int(message.text)
    await state.update_data(player_count=count, players=[], current=0)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞ ‚Ññ1:")
    await state.set_state(Game.get_player_names)

# ==== –í–í–û–î –ò–ú–Å–ù ====
@dp.message(Game.get_player_names)
async def get_names(message: Message, state: FSMContext):
    data = await state.get_data()
    players = data["players"]
    players.append(message.text)
    await state.update_data(players=players)
    if len(players) < data["player_count"]:
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞ ‚Ññ{len(players)+1}:")
    else:
        await message.answer("–í—Å–µ –∏–≥—Ä–æ–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã! üéâ\n–ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É!")
        await next_turn(message, state)

# ==== –°–õ–ï–î–£–Æ–©–ò–ô –•–û–î ====
async def next_turn(message: Message, state: FSMContext):
    data = await state.get_data()
    players = data["players"]
    current = data["current"]

    player = players[current % len(players)]
    await state.update_data(current=current + 1)

    await message.answer(
        f"üëâ –•–æ–¥ –∏–≥—Ä–æ–∫–∞: *{player}*\n–í—ã–±–µ—Ä–∏:",
        parse_mode="Markdown",
        reply_markup=choice_keyboard()
    )
    await state.set_state(Game.in_game)

# ==== –û–°–ù–û–í–ù–û–ô –ò–ì–†–û–í–û–ô –ü–†–û–¶–ï–°–° ====
@dp.message(Game.in_game)
async def in_game(message: Message, state: FSMContext):
    text = message.text
    data = await state.get_data()
    category = data["category"]

    if text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å üèÅ":
        await message.answer("–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! üéä –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")
        await state.clear()
        return

    if text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å üîÅ":
        await message.answer("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ö–æ–¥ üîÑ")
        await next_turn(message, state)
        return

    if text.startswith("–ü—Ä–∞–≤–¥–∞"):
        question = random.choice(QUESTIONS[category]["truth"])
        await message.answer(f"üü¶ *–ü—Ä–∞–≤–¥–∞:*\n{question}", parse_mode="Markdown")
        await asyncio.sleep(2)
        await next_turn(message, state)

    elif text.startswith("–î–µ–π—Å—Ç–≤–∏–µ"):
        question = random.choice(QUESTIONS[category]["dare"])
        await message.answer(f"üü• *–î–µ–π—Å—Ç–≤–∏–µ:*\n{question}", parse_mode="Markdown")
        await asyncio.sleep(2)
        await next_turn(message, state)
    else:
        await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã!")

# ==== –ó–ê–ü–£–°–ö ====
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
