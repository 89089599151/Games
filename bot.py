
"""
Truth-or-Dare Telegram Bot ‚Äî SINGLE FILE (aiogram 3.x)

‚öôÔ∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ (–≤—Å—ë –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ):
- –õ–æ–±–±–∏ —Å /newgame: —Ö–æ—Å—Ç, Join/Leave, —Å—Ç–∞—Ä—Ç —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
- –ò–≥—Ä–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ –ª–∏—á–∫–µ, –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
- –ò–Ω–ª–∞–π–Ω-—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ü—Ä–∞–≤–¥–∞/–î–µ–π—Å—Ç–≤–∏–µ/–ü—Ä–æ–ø—É—Å–∫/–ó–∞–≤–µ—Ä—à–∏—Ç—å
- –¢–∞–π–º–µ—Ä —Ö–æ–¥–∞ (0/20/30/45 —Å–µ–∫.), –∞–≤—Ç–æ–ø—Ä–æ–ø—É—Å–∫/—à—Ç—Ä–∞—Ñ
- –û—á–∫–∏, /score, –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ ¬´–ó–∞—Å—á–∏—Ç–∞—Ç—å?¬ª üëç/üëé (–∏–ª–∏ —Ä–µ—à–µ–Ω–∏–µ —Ö–æ—Å—Ç–∞)
- –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (–õ—ë–≥–∫–æ–µ, –î—Ä—É–∑—å—è, –†–æ–º–∞–Ω—Ç–∏–∫–∞, –ñ–µ—Å—Ç—å), –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ (0+/12+/16+)
- –ù–∞—Å—Ç—Ä–æ–π–∫–∏: /settings –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ ‚Äî –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –≤–æ–∑—Ä–∞—Å—Ç–∞, —Ç–∞–π–º–µ—Ä–∞, –æ—á–∫–æ–≤, —à—Ç—Ä–∞—Ñ–∞
- –ú–∏–Ω–∏-"—Å–ø–∏–Ω–Ω–µ—Ä" –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
- –ò–º–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–ª–æ–¥—ã –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π: /import_deck {JSON}
  (—Ñ–æ—Ä–º–∞—Ç —Å–º. –Ω–∏–∂–µ)

üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:
- –¢–æ–∫–µ–Ω –±–µ—Ä—ë—Ç—Å—è –∏–∑ ENV-–ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π BOT_TOKEN. –ù–ò–ö–û–ì–î–ê –Ω–µ —Ö–∞—Ä–¥–∫–æ–¥—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ –∫–æ–¥.
  –ó–∞–ø—É—Å–∫:  BOT_TOKEN=123:ABC python bot.py

üß© –§–æ—Ä–º–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–ª–æ–¥—ã (–¥–ª—è –∫–æ–º–∞–Ω–¥—ã /import_deck):
{
  "meta": {"lang": "ru", "version": 1},
  "items": [
    {
      "id": "rom-001",
      "type": "truth",           // "truth" –∏–ª–∏ "dare"
      "category": "–†–æ–º–∞–Ω—Ç–∏–∫–∞",
      "age": "12+",              // "0+" | "12+" | "16+"
      "tags": ["—Å–æ—Ü","–∫—Ä–µ–∞—Ç–∏–≤"], // –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ —Ç–µ–≥–∏
      "text": "–ö–∞–∫–æ–µ —Å–≤–∏–¥–∞–Ω–∏–µ —Ç—ã —Å—á–∏—Ç–∞–µ—à—å –∏–¥–µ–∞–ª—å–Ω—ã–º?"
    }
  ]
}

üì¶ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: aiogram>=3
pip install -U aiogram

¬© 2025. –≠—Ç–æ—Ç —Ñ–∞–π–ª –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –∫–∞–∫ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π, –≥–æ—Ç–æ–≤—ã–π –∫ –∑–∞–ø—É—Å–∫—É –ø—Ä–∏–º–µ—Ä.
"""

import os
from dotenv import load_dotenv

load_dotenv()
import asyncio
import json
import random
from dataclasses import dataclass, field
from typing import Dict, List, Optional, Sequence, Set, Tuple

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
)

# ===========================
# CONFIG
# ===========================

BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
if not BOT_TOKEN:
    raise SystemExit(
        "‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "BOT_TOKEN=123:ABC python bot.py"
    )

# –¢–∞–π–º–∏–Ω–≥–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–ø–∏–Ω–Ω–µ—Ä–∞
SPINNER_STEPS = 10
SPINNER_DELAY = 0.12

# ===========================
# –ë–ê–ó–û–í–ê–Ø –ö–û–õ–û–î–ê (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å)
# ===========================

DEFAULT_DECK = [
    # –õ—ë–≥–∫–æ–µ ‚Äî –ø—Ä–∞–≤–¥–∞
    {"id":"light-t-01","type":"truth","category":"–õ—ë–≥–∫–æ–µ","age":"0+","tags":["—Å–º–µ—Ö"],"text":"–ö–∞–∫–æ–π –º–µ–º —É —Ç–µ–±—è —Å–µ–π—á–∞—Å –ª—é–±–∏–º—ã–π?"},
    {"id":"light-t-02","type":"truth","category":"–õ—ë–≥–∫–æ–µ","age":"0+","tags":["—Å–æ—Ü"],"text":"–ö–∞–∫–æ–π –Ω–∞–≤—ã–∫ —Ç–µ–±–µ —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –≤—ã—É—á–∏—Ç—å?"},
    {"id":"light-t-03","type":"truth","category":"–õ—ë–≥–∫–æ–µ","age":"0+","tags":["—Å–º–µ—Ö"],"text":"–°–∞–º–∞—è —Å—Ç—Ä–∞–Ω–Ω–∞—è –µ–¥–∞, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –ø—Ä–æ–±–æ–≤–∞–ª(-–∞)?"},
    {"id":"light-t-04","type":"truth","category":"–õ—ë–≥–∫–æ–µ","age":"0+","tags":["–∫—Ä–µ–∞—Ç–∏–≤"],"text":"–ï—Å–ª–∏ –±—ã —É —Ç–µ–±—è –±—ã–ª —Å–ª–æ–≥–∞–Ω, –∫–∞–∫ –±—ã –æ–Ω –∑–≤—É—á–∞–ª?"},
    {"id":"light-t-05","type":"truth","category":"–õ—ë–≥–∫–æ–µ","age":"0+","tags":["—Å–æ—Ü"],"text":"–ß—Ç–æ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ–±—è –ø–æ‚Äë–Ω–∞—Å—Ç–æ—è—â–µ–º—É —É–¥–∏–≤–∏–ª–æ?"},
    {"id":"light-t-06","type":"truth","category":"–õ—ë–≥–∫–æ–µ","age":"0+","tags":["—Å–æ—Ü"],"text":"–í —á—ë–º —Ç—ã —è–≤–Ω–æ —Ö–æ—Ä–æ—à(-–∞), –Ω–æ —Ä–µ–¥–∫–æ –æ–± —ç—Ç–æ–º –≥–æ–≤–æ—Ä–∏—à—å?"},
    {"id":"light-t-07","type":"truth","category":"–õ—ë–≥–∫–æ–µ","age":"0+","tags":["—Å–º–µ—Ö"],"text":"–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–∏–Ω–≥—Ç–æ–Ω/–∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?"},
    {"id":"light-t-08","type":"truth","category":"–õ—ë–≥–∫–æ–µ","age":"0+","tags":["—Å–æ—Ü"],"text":"–ß–µ–π —Å–æ–≤–µ—Ç –≤ —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ —Ç—ã —á–∞—â–µ –≤—Å–µ–≥–æ —Å–ª—É—à–∞–µ—à—å?"},
    {"id":"light-t-09","type":"truth","category":"–õ—ë–≥–∫–æ–µ","age":"0+","tags":["–∫—Ä–µ–∞—Ç–∏–≤"],"text":"–ù–∞–∑–æ–≤–∏ —Ç—Ä–∏ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø–∏—Å—ã–≤–∞—é—Ç —Ç–≤–æ–π –¥–µ–Ω—å."},
    {"id":"light-t-10","type":"truth","category":"–õ—ë–≥–∫–æ–µ","age":"0+","tags":["—Å–æ—Ü"],"text":"–ö–∞–∫–æ–π —É —Ç–µ–±—è ¬´—Ç–∏—Ö–∏–π¬ª guilty pleasure?"},

    # –õ—ë–≥–∫–æ–µ ‚Äî –¥–µ–π—Å—Ç–≤–∏–µ
    {"id":"light-d-01","type":"dare","category":"–õ—ë–≥–∫–æ–µ","age":"0+","tags":["—Å–º–µ—Ö"],"text":"–ò–∑–æ–±—Ä–∞–∑–∏ —Å–º–µ—Ö —Ç—Ä—ë—Ö —Ä–∞–∑–Ω—ã—Ö –∑–ª–æ–¥–µ–µ–≤."},
    {"id":"light-d-02","type":"dare","category":"–õ—ë–≥–∫–æ–µ","age":"0+","tags":["–∞–∫—Ç–∏–≤"],"text":"–°–¥–µ–ª–∞–π 10 –º–∏–Ω–∏‚Äë–ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π, —Å—á–∏—Ç–∞—è –Ω–∞ –≤—ã–¥—É–º–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ."},
    {"id":"light-d-03","type":"dare","category":"–õ—ë–≥–∫–æ–µ","age":"0+","tags":["–∫—Ä–µ–∞—Ç–∏–≤"],"text":"–û–∑–≤—É—á—å –Ω–∞ 15 —Å–µ–∫—É–Ω–¥ –ª—é–±–æ–π –ø—Ä–µ–¥–º–µ—Ç –≤ –∫–æ–º–Ω–∞—Ç–µ."},
    {"id":"light-d-04","type":"dare","category":"–õ—ë–≥–∫–æ–µ","age":"0+","tags":["—Å–æ—Ü"],"text":"–°–∫–∞–∂–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ —Ç—ë–ø–ª—ã–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –¥–≤—É–º –∏–≥—Ä–æ–∫–∞–º."},
    {"id":"light-d-05","type":"dare","category":"–õ—ë–≥–∫–æ–µ","age":"0+","tags":["—Å–º–µ—Ö"],"text":"–ü–æ–∫–∞–∂–∏ —Å–≤–æ—ë ¬´—Å–∞–º–æ–µ —Å–µ—Ä—å—ë–∑–Ω–æ–µ¬ª –ª–∏—Ü–æ –∏ –Ω–µ —Å–º–µ–π—Å—è 10 —Å–µ–∫—É–Ω–¥."},
    {"id":"light-d-06","type":"dare","category":"–õ—ë–≥–∫–æ–µ","age":"0+","tags":["–∫—Ä–µ–∞—Ç–∏–≤"],"text":"–û–ø–∏—Å—ã–≤–∞–π –≤—Å—ë –≤–æ–∫—Ä—É–≥ –±—É–¥—Ç–æ —Ç—ã —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä, 20 —Å–µ–∫—É–Ω–¥."},
    {"id":"light-d-07","type":"dare","category":"–õ—ë–≥–∫–æ–µ","age":"0+","tags":["–∞–∫—Ç–∏–≤"],"text":"–°–¥–µ–ª–∞–π 5 –Ω–µ–æ–±—ã—á–Ω—ã—Ö –ø–æ–∑ –π–æ–≥–∏ (–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö)."},
    {"id":"light-d-08","type":"dare","category":"–õ—ë–≥–∫–æ–µ","age":"0+","tags":["—Å–æ—Ü"],"text":"–ü—Ä–∏–¥—É–º–∞–π –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É —Å–º–µ—à–Ω–æ–π –Ω–∏–∫."},
    {"id":"light-d-09","type":"dare","category":"–õ—ë–≥–∫–æ–µ","age":"0+","tags":["—Å–º–µ—Ö"],"text":"–ü—Ä–æ–≥–æ–≤–æ—Ä–∏ —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫—É –±–µ–∑ –æ—à–∏–±–æ–∫: ¬´–ö–∞—Ä–ª —É –ö–ª–∞—Ä—ã...¬ª"},
    {"id":"light-d-10","type":"dare","category":"–õ—ë–≥–∫–æ–µ","age":"0+","tags":["–∫—Ä–µ–∞—Ç–∏–≤"],"text":"–°–æ—á–∏–Ω–∏ –∏ –ø—Ä–æ—á–∏—Ç–∞–π –¥–≤—É—Å—Ç–∏—à–∏–µ –æ —á—ë–º —É–≥–æ–¥–Ω–æ."},

    # –î—Ä—É–∑—å—è ‚Äî –ø—Ä–∞–≤–¥–∞
    {"id":"friends-t-01","type":"truth","category":"–î—Ä—É–∑—å—è","age":"0+","tags":["—Å–æ—Ü"],"text":"–ö—Ç–æ –∏–∑ –Ω–∞—Å —á–∞—â–µ –≤—Å–µ–≥–æ —Ç–µ–±—è —Å–º–µ—à–∏—Ç –∏ –ø–æ—á–µ–º—É?"},
    {"id":"friends-t-02","type":"truth","category":"–î—Ä—É–∑—å—è","age":"0+","tags":["—Å–æ—Ü"],"text":"–ö–∞–∫–æ–π –æ–±—â–∏–π —Ä–∏—Ç—É–∞–ª –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ —Ç—ã –ª—é–±–∏—à—å?"},
    {"id":"friends-t-03","type":"truth","category":"–î—Ä—É–∑—å—è","age":"0+","tags":["—Å–æ—Ü"],"text":"–ö–∞–∫ —Ç—ã –æ–±—ã—á–Ω–æ —Ä–µ—à–∞–µ—à—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å –¥—Ä—É–∑—å—è–º–∏?"},
    {"id":"friends-t-04","type":"truth","category":"–î—Ä—É–∑—å—è","age":"0+","tags":["—Å–æ—Ü"],"text":"–ß–µ–º —Ç—ã –≥–æ—Ä–¥–∏—à—å—Å—è –≤ –æ–¥–Ω–æ–º –∏–∑ –∏–≥—Ä–æ–∫–æ–≤?"},
    {"id":"friends-t-05","type":"truth","category":"–î—Ä—É–∑—å—è","age":"0+","tags":["—Å–æ—Ü"],"text":"–ß—Ç–æ –±—ã —Ç—ã –¥–æ–±–∞–≤–∏–ª(-–∞) –∫ –Ω–∞—à–µ–º—É —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ–≤–º–µ—Å—Ç–Ω–æ–º—É –ø–ª–∞–Ω—É?"},
    {"id":"friends-t-06","type":"truth","category":"–î—Ä—É–∑—å—è","age":"0+","tags":["—Å–æ—Ü"],"text":"–ö–∞–∫–æ–π —Å–æ–≤–µ—Ç —Ç—ã –±—ã –¥–∞–ª(-–∞) —Å–µ–±–µ –≥–æ–¥ –Ω–∞–∑–∞–¥?"},
    {"id":"friends-t-07","type":"truth","category":"–î—Ä—É–∑—å—è","age":"0+","tags":["—Å–æ—Ü"],"text":"–ù–∞–∑–æ–≤–∏ –ø—Ä–∏–≤—ã—á–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –ø—Ä–æ–∫–∞—á–∞—Ç—å."},
    {"id":"friends-t-08","type":"truth","category":"–î—Ä—É–∑—å—è","age":"0+","tags":["—Å–º–µ—Ö"],"text":"–°–∞–º–∞—è –Ω–µ–ª–µ–ø–∞—è —Å–æ–≤–º–µ—Å—Ç–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è?"},
    {"id":"friends-t-09","type":"truth","category":"–î—Ä—É–∑—å—è","age":"0+","tags":["—Å–æ—Ü"],"text":"–ö–æ–º—É –∏–∑ –Ω–∞—Å —Ç—ã –±—ã –¥–æ–≤–µ—Ä–∏–ª(-–∞) –≤–∞–∂–Ω—É—é –∑–∞–¥–∞—á—É –∏ –ø–æ—á–µ–º—É?"},
    {"id":"friends-t-10","type":"truth","category":"–î—Ä—É–∑—å—è","age":"0+","tags":["—Å–æ—Ü"],"text":"–ö–∞–∫–∞—è ¬´—Ñ–∏—à–∫–∞¬ª —É –∫–∞–∂–¥–æ–≥–æ –∏–∑ –Ω–∞—Å?"},

    # –î—Ä—É–∑—å—è ‚Äî –¥–µ–π—Å—Ç–≤–∏–µ
    {"id":"friends-d-01","type":"dare","category":"–î—Ä—É–∑—å—è","age":"0+","tags":["—Å–æ—Ü"],"text":"–°–¥–µ–ª–∞–π –≥—Ä—É–ø–ø–æ–≤–æ–µ —Ñ–æ—Ç–æ —Å –∑–∞–±–∞–≤–Ω–æ–π —Ç–µ–º–æ–π (–µ—Å–ª–∏ –æ—Ñ–ª–∞–π–Ω)."},
    {"id":"friends-d-02","type":"dare","category":"–î—Ä—É–∑—å—è","age":"0+","tags":["–∫—Ä–µ–∞—Ç–∏–≤"],"text":"–°—ã–≥—Ä–∞–π –º–∏–Ω–∏‚Äë—Å—Ü–µ–Ω–∫—É ¬´–º—ã –ø–æ—Ç–µ—Ä—è–ª–∏ –∫–ª—é—á–∏¬ª, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏–≤ —Ä–æ–ª–∏."},
    {"id":"friends-d-03","type":"dare","category":"–î—Ä—É–∑—å—è","age":"0+","tags":["—Å–º–µ—Ö"],"text":"–ò–∑–æ–±—Ä–∞–∑–∏ –æ–¥–Ω–æ–≥–æ –∏–∑ –¥—Ä—É–∑–µ–π —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω —É–∑–Ω–∞–ª —Å–µ–±—è."},
    {"id":"friends-d-04","type":"dare","category":"–î—Ä—É–∑—å—è","age":"0+","tags":["—Å–æ—Ü"],"text":"–ö–∞–∂–¥–æ–º—É —Å–∫–∞–∂–∏, –∑–∞ —á—Ç–æ —Ç—ã –µ–≥–æ —Ü–µ–Ω–∏—à—å."},
    {"id":"friends-d-05","type":"dare","category":"–î—Ä—É–∑—å—è","age":"0+","tags":["–∫—Ä–µ–∞—Ç–∏–≤"],"text":"–ü—Ä–∏–¥—É–º–∞–π –∏ –æ–±—ä—è–≤–∏ –Ω–∞—à –æ–±—â–∏–π –¥–µ–≤–∏–∑."},
    {"id":"friends-d-06","type":"dare","category":"–î—Ä—É–∑—å—è","age":"0+","tags":["–∞–∫—Ç–∏–≤"],"text":"–°–¥–µ–ª–∞–π—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∂–µ—Å—Ç/—Ç–∞–Ω–µ—Ü –≤—Ç—Ä–æ—ë–º."},
    {"id":"friends-d-07","type":"dare","category":"–î—Ä—É–∑—å—è","age":"0+","tags":["—Å–º–µ—Ö"],"text":"–ò–∑–æ–±—Ä–∞–∑–∏ –≤–∏–¥–µ–æ–±–ª–æ–≥–µ—Ä–∞, —Ä–µ–∫–ª–∞–º–∏—Ä—É—é—â–µ–≥–æ —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã."},
    {"id":"friends-d-08","type":"dare","category":"–î—Ä—É–∑—å—è","age":"0+","tags":["—Å–æ—Ü"],"text":"–°–¥–µ–ª–∞–π –≥–æ–ª–æ—Å–æ–≤–æ–µ –Ω–∞ 10 —Å–µ–∫—É–Ω–¥ —Å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º —Ç–æ—Å—Ç–æ–º."},
    {"id":"friends-d-09","type":"dare","category":"–î—Ä—É–∑—å—è","age":"0+","tags":["–∫—Ä–µ–∞—Ç–∏–≤"],"text":"–ü—Ä–∏–¥—É–º–∞–π –∫–∞–∂–¥–æ–º—É —ç–º–æ–¥–∑–∏‚Äë–≥–µ—Ä–∞–ª—å–¥–∏–∫—É."},
    {"id":"friends-d-10","type":"dare","category":"–î—Ä—É–∑—å—è","age":"0+","tags":["—Å–º–µ—Ö"],"text":"–†–∞—Å—Å–∫–∞–∂–∏ –º–∏–Ω–∏‚Äë–∞–Ω–µ–∫–¥–æ—Ç –±–µ–∑ —Å–º–µ—Ö–∞."},

    # –†–æ–º–∞–Ω—Ç–∏–∫–∞ ‚Äî –ø—Ä–∞–≤–¥–∞
    {"id":"romance-t-01","type":"truth","category":"–†–æ–º–∞–Ω—Ç–∏–∫–∞","age":"12+","tags":["—Å–æ—Ü"],"text":"–ö–∞–∫–∞—è –º–µ–ª–æ—á—å –¥–µ–ª–∞–µ—Ç —Å–≤–∏–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–Ω—ã–º?"},
    {"id":"romance-t-02","type":"truth","category":"–†–æ–º–∞–Ω—Ç–∏–∫–∞","age":"12+","tags":["—Å–æ—Ü"],"text":"–ö–∞–∫ —Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ—à—å –∑–∞–±–æ—Ç—É –æ –ª—é–¥—è—Ö?"},
    {"id":"romance-t-03","type":"truth","category":"–†–æ–º–∞–Ω—Ç–∏–∫–∞","age":"12+","tags":["–∫—Ä–µ–∞—Ç–∏–≤"],"text":"–ò–¥–µ—è —Å–∞–º–æ–≥–æ –º–∏–ª–æ–≥–æ —Å—é—Ä–ø—Ä–∏–∑–∞?"},
    {"id":"romance-t-04","type":"truth","category":"–†–æ–º–∞–Ω—Ç–∏–∫–∞","age":"12+","tags":["—Å–æ—Ü"],"text":"–§–∏–ª—å–º/–ø–µ—Å–Ω—è, —Å –∫–æ—Ç–æ—Ä—ã–º —É —Ç–µ–±—è —Å–≤—è–∑–∞–Ω—ã —Ç—ë–ø–ª—ã–µ —á—É–≤—Å—Ç–≤–∞?"},
    {"id":"romance-t-05","type":"truth","category":"–†–æ–º–∞–Ω—Ç–∏–∫–∞","age":"12+","tags":["—Å–æ—Ü"],"text":"–¢–≤–æ–π —è–∑—ã–∫ –ª—é–±–≤–∏ (–≤–Ω–∏–º–∞–Ω–∏–µ, –≤—Ä–µ–º—è, –ø–æ–¥–∞—Ä–∫–∏, —Å–ª–æ–≤–∞, –ø–æ–º–æ—â—å)?"},
    {"id":"romance-t-06","type":"truth","category":"–†–æ–º–∞–Ω—Ç–∏–∫–∞","age":"12+","tags":["—Å–æ—Ü"],"text":"–ß—Ç–æ –¥–ª—è —Ç–µ–±—è ¬´–∏–¥–µ–∞–ª—å–Ω—ã–π –≤–µ—á–µ—Ä¬ª?"},
    {"id":"romance-t-07","type":"truth","category":"–†–æ–º–∞–Ω—Ç–∏–∫–∞","age":"12+","tags":["—Å–æ—Ü"],"text":"–ö–∞–∫–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –≤ –æ–±—â–µ–Ω–∏–∏ –¥–ª—è —Ç–µ–±—è –≤–∞–∂–Ω–∞?"},
    {"id":"romance-t-08","type":"truth","category":"–†–æ–º–∞–Ω—Ç–∏–∫–∞","age":"12+","tags":["—Å–æ—Ü"],"text":"–°–∞–º–∞—è –º–∏–ª–∞—è —Ñ—Ä–∞–∑–∞, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Å–ª—ã—à–∞–ª(-–∞)?"},
    {"id":"romance-t-09","type":"truth","category":"–†–æ–º–∞–Ω—Ç–∏–∫–∞","age":"12+","tags":["—Å–æ—Ü"],"text":"–ö–∞–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ç—ã —Ü–µ–Ω–∏—à—å –≤ –ø–∞—Ä—Ç–Ω—ë—Ä–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?"},
    {"id":"romance-t-10","type":"truth","category":"–†–æ–º–∞–Ω—Ç–∏–∫–∞","age":"12+","tags":["—Å–æ—Ü"],"text":"–ö–∞–∫–∞—è ¬´–º–∞–ª–µ–Ω—å–∫–∞—è –∑–∞–±–æ—Ç–∞¬ª —Ç–µ–±—è —Ç—Ä–æ–≥–∞–µ—Ç?"},

    # –†–æ–º–∞–Ω—Ç–∏–∫–∞ ‚Äî –¥–µ–π—Å—Ç–≤–∏–µ
    {"id":"romance-d-01","type":"dare","category":"–†–æ–º–∞–Ω—Ç–∏–∫–∞","age":"12+","tags":["—Å–æ—Ü"],"text":"–°–∫–∞–∂–∏ —Ç—ë–ø–ª—ã–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –ª—é–±–æ–º—É –∏–≥—Ä–æ–∫—É."},
    {"id":"romance-d-02","type":"dare","category":"–†–æ–º–∞–Ω—Ç–∏–∫–∞","age":"12+","tags":["–∫—Ä–µ–∞—Ç–∏–≤"],"text":"–ü—Ä–æ—á–∏—Ç–∞–π –∫–æ—Ä–æ—Ç–∫–æ–µ ¬´–ø–∏—Å—å–º–æ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏¬ª –≤—Å–ª—É—Ö (2‚Äì3 —Ñ—Ä–∞–∑—ã)."},
    {"id":"romance-d-03","type":"dare","category":"–†–æ–º–∞–Ω—Ç–∏–∫–∞","age":"12+","tags":["—Å–æ—Ü"],"text":"–ü–æ–¥–µ–ª–∏—Å—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π —Ñ–∏–ª—å–º–∞/–ø–µ—Å–Ω–∏ –¥–ª—è —É—é—Ç–Ω–æ–≥–æ –≤–µ—á–µ—Ä–∞."},
    {"id":"romance-d-04","type":"dare","category":"–†–æ–º–∞–Ω—Ç–∏–∫–∞","age":"12+","tags":["–∫—Ä–µ–∞—Ç–∏–≤"],"text":"–°–æ—á–∏–Ω–∏ –º–∏–ª—É—é –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ –¥—Ä—É–≥–∞."},
    {"id":"romance-d-05","type":"dare","category":"–†–æ–º–∞–Ω—Ç–∏–∫–∞","age":"12+","tags":["—Å–æ—Ü"],"text":"–ù–∞–∑–æ–≤–∏ 3 –≤–µ—â–∏, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω(-–Ω–∞) —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º—É –¥–Ω—é."},
    {"id":"romance-d-06","type":"dare","category":"–†–æ–º–∞–Ω—Ç–∏–∫–∞","age":"12+","tags":["—Å–æ—Ü"],"text":"–ü–æ–¥–µ–ª–∏—Å—å –ø—Ä–∏—è—Ç–Ω—ã–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º (1 –º–∏–Ω.)."},
    {"id":"romance-d-07","type":"dare","category":"–†–æ–º–∞–Ω—Ç–∏–∫–∞","age":"12+","tags":["–∫—Ä–µ–∞—Ç–∏–≤"],"text":"–ü—Ä–∏–¥—É–º–∞–π –¥–æ–±—Ä—ã–π ¬´—Å–ª–æ–≥–∞–Ω –ø–æ–¥–¥–µ—Ä–∂–∫–∏¬ª –¥–ª—è —Å–æ—Å–µ–¥–∞ —Å–ª–µ–≤–∞."},
    {"id":"romance-d-08","type":"dare","category":"–†–æ–º–∞–Ω—Ç–∏–∫–∞","age":"12+","tags":["—Å–æ—Ü"],"text":"–£—Å—Ç—Ä–æ–π –º–∏–Ω–∏‚Äë—á–µ–ª–ª–µ–Ω–¥–∂ ¬´—É–ª—ã–±–Ω–∏—Å—å –∏ –ø–µ—Ä–µ–¥–∞–π –¥–∞–ª—å—à–µ¬ª."},
    {"id":"romance-d-09","type":"dare","category":"–†–æ–º–∞–Ω—Ç–∏–∫–∞","age":"12+","tags":["—Å–æ—Ü"],"text":"–°–∫–∞–∂–∏ ¬´—Å–ø–∞—Å–∏–±–æ¬ª —á–µ–ª–æ–≤–µ–∫—É, –∫–æ–º—É –¥–∞–≤–Ω–æ —Ö–æ—Ç–µ–ª(-–∞)."},
    {"id":"romance-d-10","type":"dare","category":"–†–æ–º–∞–Ω—Ç–∏–∫–∞","age":"12+","tags":["—Å–æ—Ü"],"text":"–°–¥–µ–ª–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–æ—Å—Ç –∑–∞ —Ö–æ—Ä–æ—à—É—é –∫–æ–º–ø–∞–Ω–∏—é."},

    # –ñ–µ—Å—Ç—å ‚Äî –ø—Ä–∞–≤–¥–∞
    {"id":"extreme-t-01","type":"truth","category":"–ñ–µ—Å—Ç—å","age":"16+","tags":["—Å–æ—Ü"],"text":"–ö–∞–∫–æ–π –≤—ã–∑–æ–≤ —Å–µ–±–µ —Ç—ã –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ—à—å —É–∂–µ –¥–∞–≤–Ω–æ?"},
    {"id":"extreme-t-02","type":"truth","category":"–ñ–µ—Å—Ç—å","age":"16+","tags":["—Å–æ—Ü"],"text":"–°–∞–º–∞—è —Å–º–µ–ª–∞—è –≤–µ—â—å, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –¥–µ–ª–∞–ª(-–∞)?"},
    {"id":"extreme-t-03","type":"truth","category":"–ñ–µ—Å—Ç—å","age":"16+","tags":["—Å–æ—Ü"],"text":"–ö–∞–∫–æ–π —Å–≤–æ–π —Å—Ç—Ä–∞—Ö —Ç—ã –≥–æ—Ç–æ–≤(-–∞) ¬´–ø—Ä–æ—â—É–ø–∞—Ç—å¬ª —Å–µ–≥–æ–¥–Ω—è?"},
    {"id":"extreme-t-04","type":"truth","category":"–ñ–µ—Å—Ç—å","age":"16+","tags":["—Å–æ—Ü"],"text":"–û —á—ë–º —Ç—ã –º–µ—á—Ç–∞–µ—à—å, –Ω–æ –Ω–∏–∫–æ–º—É –Ω–µ –≥–æ–≤–æ—Ä–∏–ª(-–∞)?"},
    {"id":"extreme-t-05","type":"truth","category":"–ñ–µ—Å—Ç—å","age":"16+","tags":["—Å–æ—Ü"],"text":"–ß—Ç–æ —Å–ª–æ–∂–Ω–µ–µ: –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–º–æ—â—å –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –µ—ë?"},
    {"id":"extreme-t-06","type":"truth","category":"–ñ–µ—Å—Ç—å","age":"16+","tags":["—Å–æ—Ü"],"text":"–ö–∞–∫–æ–π —Ä–∏—Å–∫ —Ç—ã –ø—Ä–∏–Ω—è–ª(-–∞) –∏ –Ω–µ –∂–∞–ª–µ–µ—à—å?"},
    {"id":"extreme-t-07","type":"truth","category":"–ñ–µ—Å—Ç—å","age":"16+","tags":["—Å–æ—Ü"],"text":"–ì–¥–µ —Ç–≤–æ—è ¬´–∑–æ–Ω–∞ –∫–æ–º—Ñ–æ—Ä—Ç–∞¬ª —Å–µ–≥–æ–¥–Ω—è?"},
    {"id":"extreme-t-08","type":"truth","category":"–ñ–µ—Å—Ç—å","age":"16+","tags":["—Å–æ—Ü"],"text":"–ß—Ç–æ –±—ã —Ç—ã —Å–¥–µ–ª–∞–ª(-–∞), –µ—Å–ª–∏ –± —Å–µ–≥–æ–¥–Ω—è –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –∫–∞–Ω–∏–∫—É–ª?"},
    {"id":"extreme-t-09","type":"truth","category":"–ñ–µ—Å—Ç—å","age":"16+","tags":["—Å–æ—Ü"],"text":"–°–∞–º–∞—è –Ω–µ–ª–æ–≤–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª(-–∞) –≤ —à—É—Ç–∫—É?"},
    {"id":"extreme-t-10","type":"truth","category":"–ñ–µ—Å—Ç—å","age":"16+","tags":["—Å–æ—Ü"],"text":"–ö–∞–∫–∞—è —Ç–≤–æ—è ¬´–≥—Ä–∞–Ω—å¬ª, –æ –∫–æ—Ç–æ—Ä–æ–π –∑–Ω–∞—é—Ç –Ω–µ–º–Ω–æ–≥–∏–µ?"},

    # –ñ–µ—Å—Ç—å ‚Äî –¥–µ–π—Å—Ç–≤–∏–µ
    {"id":"extreme-d-01","type":"dare","category":"–ñ–µ—Å—Ç—å","age":"16+","tags":["–∞–∫—Ç–∏–≤"],"text":"–°–¥–µ–ª–∞–π 20 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π –∏–ª–∏ 10 –æ—Ç–∂–∏–º–∞–Ω–∏–π (–±–µ–∑–æ–ø–∞—Å–Ω–æ)."},
    {"id":"extreme-d-02","type":"dare","category":"–ñ–µ—Å—Ç—å","age":"16+","tags":["—Å–º–µ—Ö"],"text":"–ü—Ä–æ—á–∏—Ç–∞–π ¬´—Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫—É —Ö3¬ª –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑ –æ—à–∏–±–æ–∫."},
    {"id":"extreme-d-03","type":"dare","category":"–ñ–µ—Å—Ç—å","age":"16+","tags":["–∫—Ä–µ–∞—Ç–∏–≤"],"text":"–°—ã–≥—Ä–∞–π –º–∏–Ω–∏‚Äë–º–æ–Ω–æ–ª–æ–≥ ¬´–µ—Å–ª–∏ –±—ã —è –æ–∫–∞–∑–∞–ª—Å—è(-–∞—Å—å) –≤ –∫–∏–Ω–æ¬ª."},
    {"id":"extreme-d-04","type":"dare","category":"–ñ–µ—Å—Ç—å","age":"16+","tags":["–∞–∫—Ç–∏–≤"],"text":"–°–¥–µ–ª–∞–π –ø–ª–∞–Ω–∫—É 30 —Å–µ–∫—É–Ω–¥ (–ø–æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—é)."},
    {"id":"extreme-d-05","type":"dare","category":"–ñ–µ—Å—Ç—å","age":"16+","tags":["—Å–æ—Ü"],"text":"–†–∞—Å—Å–∫–∞–∂–∏ –∏—Å—Ç–æ—Ä–∏—é, –≥–¥–µ —Ç—ã –ø—Ä–µ–≤–æ–∑–º–æ–≥(-–ª–∞) —Å–µ–±—è."},
    {"id":"extreme-d-06","type":"dare","category":"–ñ–µ—Å—Ç—å","age":"16+","tags":["—Å–º–µ—Ö"],"text":"–ü–æ–∫–∞–∂–∏ ¬´–∑–ª–æ–π –≤–∑–≥–ª—è–¥¬ª –∏–∑ –∫–∏–Ω–æ –∏ —É–¥–µ—Ä–∂–∏–≤–∞–π 10 —Å–µ–∫."},
    {"id":"extreme-d-07","type":"dare","category":"–ñ–µ—Å—Ç—å","age":"16+","tags":["–∫—Ä–µ–∞—Ç–∏–≤"],"text":"–°–æ—á–∏–Ω–∏ —Ä–µ–∫–ª–∞–º–Ω—ã–π —Å–ª–æ–≥–∞–Ω –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–∞ —Å—Ç–æ–ª–µ."},
    {"id":"extreme-d-08","type":"dare","category":"–ñ–µ—Å—Ç—å","age":"16+","tags":["–∞–∫—Ç–∏–≤"],"text":"–°–¥–µ–ª–∞–π 15 –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π –ø–æ–¥ —Å—á—ë—Ç –∫–æ–º–ø–∞–Ω–∏–∏."},
    {"id":"extreme-d-09","type":"dare","category":"–ñ–µ—Å—Ç—å","age":"16+","tags":["—Å–æ—Ü"],"text":"–ù–∞–∑–æ–≤–∏ —Å–≤–æ—é —Ü–µ–ª—å –Ω–∞ –Ω–µ–¥–µ–ª—é –∏ –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç."},
    {"id":"extreme-d-10","type":"dare","category":"–ñ–µ—Å—Ç—å","age":"16+","tags":["–∫—Ä–µ–∞—Ç–∏–≤"],"text":"–ü—Ä–∏–¥—É–º–∞–π ¬´–∂—ë—Å—Ç–∫–æ–µ¬ª –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—à–µ–º—É —Å–ª–µ–¥—É—é—â–µ–º—É —á–µ–ª–ª–µ–Ω–¥–∂—É."},

    # 18+ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    {"id":"romance18-t-01","type":"truth","category":"–†–æ–º–∞–Ω—Ç–∏–∫–∞","age":"18+","tags":["—Å–æ—Ü"],"text":"–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –º–æ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Å—Ç–∞–≤–∏–ª –≤ —Ç–µ–±–µ ¬´üî• –∏—Å–∫—Ä—É¬ª?"},
    {"id":"romance18-d-01","type":"dare","category":"–†–æ–º–∞–Ω—Ç–∏–∫–∞","age":"18+","tags":["–∫—Ä–µ–∞—Ç–∏–≤"],"text":"–°–æ—á–∏–Ω–∏ —Å–º–µ–ª—ã–π —Ç–æ—Å—Ç, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—Å–µ–º —Å—Ç–∞–Ω–µ—Ç –∂–∞—Ä–∫–æ."},
    {"id":"extreme18-t-01","type":"truth","category":"–ñ–µ—Å—Ç—å","age":"18+","tags":["—Å–º–µ—Ö"],"text":"–ö–∞–∫–æ–π —Å–∞–º—ã–π –¥–µ—Ä–∑–∫–∏–π –ø–æ—Å—Ç—É–ø–æ–∫ —Ç—ã —Å–¥–µ–ª–∞–ª(-–∞) —Ä–∞–¥–∏ –≤–µ—Å–µ–ª—å—è?"},
    {"id":"extreme18-d-01","type":"dare","category":"–ñ–µ—Å—Ç—å","age":"18+","tags":["–∞–∫—Ç–∏–≤"],"text":"–ü—Ä–∏–¥—É–º–∞–π –∏ –∏–∑–æ–±—Ä–∞–∑–∏ ¬´üî• —Ç–∞–Ω–µ—Ü –ø–æ–±–µ–¥—ã¬ª –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é 15 —Å–µ–∫—É–Ω–¥."}
]

AGE_LEVELS: Dict[str, Dict[str, object]] = {
    "0+": {"emoji": "üå±", "title": "0+", "rank": 0},
    "12+": {"emoji": "üåü", "title": "12+", "rank": 1},
    "16+": {"emoji": "‚ö°", "title": "16+", "rank": 2},
    "18+": {"emoji": "üî•", "title": "18+", "rank": 3},
}

CATEGORY_INFO: Dict[str, Dict[str, object]] = {
    "–õ—ë–≥–∫–æ–µ": {"emoji": "‚ú®", "title": "–õ—ë–≥–∫–æ–µ"},
    "–î—Ä—É–∑—å—è": {"emoji": "ü§ù", "title": "–î—Ä—É–∂–±–∞"},
    "–†–æ–º–∞–Ω—Ç–∏–∫–∞": {"emoji": "üíû", "title": "–†–æ–º–∞–Ω—Ç–∏–∫–∞"},
    "–ñ–µ—Å—Ç—å": {"emoji": "üí•", "title": "–ñ–µ—Å—Ç—å"},
}

TIMER_OPTIONS: Sequence[int] = (0, 20, 30, 45, 60)
DEFAULT_TIMER_SECONDS = 30
DEFAULT_AGE_LEVEL = "16+"
DEFAULT_CATEGORY_KEY = "–õ—ë–≥–∫–æ–µ"
SELECTED_MARK = "‚úÖ"
UNSELECTED_MARK = "‚ñ´Ô∏è"

# ===========================
# –ò–ì–†–û–í–´–ï –°–¢–†–£–ö–¢–£–†–´
# ===========================

@dataclass
class Player:
    user_id: int
    name: str

@dataclass
class Turn:
    player_id: int
    type: Optional[str] = None            # "truth" | "dare"
    card_id: Optional[str] = None
    message_id: Optional[int] = None      # —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º/–∑–∞–¥–∞–Ω–∏–µ–º

@dataclass
class VoteState:
    yes: Set[int] = field(default_factory=set)
    no: Set[int] = field(default_factory=set)
    message_id: Optional[int] = None

@dataclass
class ChatGame:
    chat_id: int
    host_id: int
    players: List[Player] = field(default_factory=list)
    current_idx: int = -1
    in_progress: bool = False
    scores: Dict[int, int] = field(default_factory=dict)
    used_ids: Set[str] = field(default_factory=set)
    settings: Dict = field(
        default_factory=lambda: {
            "timer": DEFAULT_TIMER_SECONDS,
            "points": True,
            "skip_penalty": 0,
            "age_level": DEFAULT_AGE_LEVEL,
            "category": DEFAULT_CATEGORY_KEY,
        }
    )
    current_turn: Optional[Turn] = None
    timer_task: Optional[asyncio.Task] = None
    vote: Optional[VoteState] = None
    extra_deck: List[Dict] = field(default_factory=list)  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    lobby_message_id: Optional[int] = None
    settings_message_id: Optional[int] = None
    rounds_played: int = 0

    def current_player(self) -> Optional[Player]:
        if not self.players: return None
        if self.current_idx < 0: return None
        return self.players[self.current_idx % len(self.players)]

# –í—Å–µ –∏–≥—Ä—ã –ø–æ —á–∞—Ç–∞–º
GAMES: Dict[int, ChatGame] = {}

# ===========================
# AIROGRAM SETUP
# ===========================

from aiogram.client.default import DefaultBotProperties

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode="HTML")
)

dp = Dispatcher()

# ===========================
# –£–¢–ò–õ–ò–¢–´
# ===========================

def mention_html(user_id: int, name: str) -> str:
    safe = name.replace("<", "").replace(">", "")
    return f'<a href="tg://user?id={user_id}">{safe}</a>'

def is_host(game: ChatGame, user_id: int) -> bool:
    return game.host_id == user_id


def get_player(game: ChatGame, user_id: int) -> Optional[Player]:
    return next((p for p in game.players if p.user_id == user_id), None)


def format_player_name(game: ChatGame, player: Player) -> str:
    prefix = "üëë" if player.user_id == game.host_id else "üéÆ"
    return f"{prefix} {mention_html(player.user_id, player.name)}"


def cleanup_scores(game: ChatGame):
    player_ids = {p.user_id for p in game.players}
    game.scores = {uid: score for uid, score in game.scores.items() if uid in player_ids}


def format_scores(game: ChatGame) -> str:
    cleanup_scores(game)
    if not game.scores:
        return "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª –æ—á–∫–∏."
    ordered: List[Tuple[int, int]] = sorted(
        game.scores.items(), key=lambda kv: kv[1], reverse=True
    )
    lines = []
    for position, (uid, score) in enumerate(ordered, start=1):
        player = get_player(game, uid)
        name = player.name if player else f"–ò–≥—Ä–æ–∫ {uid}"
        medal = "ü•á" if position == 1 else "ü•à" if position == 2 else "ü•â" if position == 3 else "üéØ"
        prefix = "üëë" if uid == game.host_id else medal
        lines.append(f"{prefix} {mention_html(uid, name)} ‚Äî <b>{score}</b>")
    return "\n".join(lines)


def describe_timer(seconds: int) -> str:
    return "–ë–µ–∑ —Ç–∞–π–º–µ—Ä–∞" if seconds <= 0 else f"{seconds} —Å"


def describe_age(level: str) -> str:
    data = AGE_LEVELS.get(level, AGE_LEVELS[DEFAULT_AGE_LEVEL])
    return f"{data['emoji']} {data['title']}"


def describe_category(category_key: str) -> str:
    if category_key not in CATEGORY_INFO:
        category_key = DEFAULT_CATEGORY_KEY
    info = CATEGORY_INFO.get(category_key, {"emoji": "‚ùì", "title": category_key})
    title = info.get("title", category_key)
    return f"{info.get('emoji', '‚ùì')} {title}"


def describe_penalty(game: ChatGame) -> str:
    return "-1" if game.settings.get("skip_penalty", 0) == -1 else "0"


def describe_points(game: ChatGame) -> str:
    return "–í–∫–ª—é—á–µ–Ω—ã" if game.settings.get("points", True) else "–û—Ç–∫–ª—é—á–µ–Ω—ã"


def register_player(game: ChatGame, user_id: int, full_name: str) -> bool:
    if get_player(game, user_id):
        return False
    game.players.append(Player(user_id, full_name))
    game.scores.setdefault(user_id, 0)
    return True


def drop_player(game: ChatGame, user_id: int) -> bool:
    before = len(game.players)
    game.players = [p for p in game.players if p.user_id != user_id]
    removed = len(game.players) != before
    if removed:
        game.scores.pop(user_id, None)
    return removed


async def refresh_lobby(game: ChatGame, *, message: Optional[Message] = None):
    host_player = get_player(game, game.host_id)
    host_name = host_player.name if host_player else "–•–æ—Å—Ç"
    players_lines = [format_player_name(game, p) for p in game.players]
    players_block = "\n".join(players_lines) if players_lines else "‚Äî"
    text = (
        "üß© <b>–õ–æ–±–±–∏ –∏–≥—Ä—ã</b>\n"
        f"üëë –•–æ—Å—Ç: {mention_html(game.host_id, host_name)}\n"
        f"üë• –ò–≥—Ä–æ–∫–∏ ({len(game.players)}):\n{players_block}\n\n"
        "–ñ–º–∏—Ç–µ <b>–í–æ–π—Ç–∏</b>, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å. –•–æ—Å—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É –∫–Ω–æ–ø–∫–æ–π ¬´–°—Ç–∞—Ä—Ç¬ª."
    )
    keyboard = lobby_keyboard(game)
    target_chat = game.chat_id

    if message:
        try:
            await message.edit_text(text, reply_markup=keyboard)
            game.lobby_message_id = message.message_id
            return
        except Exception:
            pass

    if game.lobby_message_id:
        try:
            await bot.edit_message_text(
                text,
                chat_id=target_chat,
                message_id=game.lobby_message_id,
                reply_markup=keyboard,
            )
            return
        except Exception:
            pass

    sent = await bot.send_message(target_chat, text, reply_markup=keyboard)
    game.lobby_message_id = sent.message_id


def settings_summary(game: ChatGame) -> str:
    return (
        f"‚è±Ô∏è –¢–∞–π–º–µ—Ä: <b>{describe_timer(game.settings.get('timer', 0))}</b>\n"
        f"üéö –í–æ–∑—Ä–∞—Å—Ç: <b>{describe_age(game.settings.get('age_level', DEFAULT_AGE_LEVEL))}</b>\n"
        f"üé≠ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{describe_category(game.settings.get('category', DEFAULT_CATEGORY_KEY))}</b>\n"
        f"‚≠ê –û—á–∫–∏: <b>{describe_points(game)}</b>\n"
        f"‚öñÔ∏è –®—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ–ø—É—Å–∫: <b>{describe_penalty(game)}</b>"
    )


def settings_text(game: ChatGame, menu: str) -> str:
    header = "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã</b>"
    summary = settings_summary(game)
    host_player = get_player(game, game.host_id)
    host_name = host_player.name if host_player else "–•–æ—Å—Ç"
    if menu == "root":
        return (
            f"{header}\n"
            f"üëë –•–æ—Å—Ç: {mention_html(game.host_id, host_name)}\n\n"
            f"{summary}\n\n"
            "–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.\nüîí –ú–µ–Ω—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Ö–æ—Å—Ç."
        )
    if menu == "timer":
        return f"{header}\n\n–í—ã–±–µ—Ä–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–æ–¥–∞:"
    if menu == "age":
        return f"{header}\n\n–í—ã–±–µ—Ä–∏ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —É—Ä–æ–≤–µ–Ω—å –∫–æ–ª–æ–¥—ã:"
    if menu == "category":
        return f"{header}\n\n–í—ã–±–µ—Ä–∏ –∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤:"
    if menu == "other":
        return f"{header}\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:" \
            f"\n\n{summary}"
    return header


def build_settings_keyboard(game: ChatGame, menu: str = "root") -> InlineKeyboardMarkup:
    rows: List[List[InlineKeyboardButton]] = []
    if menu == "root":
        rows = [
            [
                InlineKeyboardButton(text="‚è±Ô∏è –í—Ä–µ–º—è", callback_data="st:menu:timer"),
                InlineKeyboardButton(text="üéö –í–æ–∑—Ä–∞—Å—Ç", callback_data="st:menu:age"),
            ],
            [
                InlineKeyboardButton(text="üé≠ –ö–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="st:menu:category"),
                InlineKeyboardButton(text="üß© –î—Ä—É–≥–æ–µ", callback_data="st:menu:other"),
            ],
            [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="st:close")],
        ]
    elif menu == "timer":
        current_timer = game.settings.get("timer", 0)
        rows = [
            [
                InlineKeyboardButton(
                    text=(
                        (f"{SELECTED_MARK} " if t == current_timer else f"{UNSELECTED_MARK} ")
                        + ("–ë–µ–∑ —Ç–∞–π–º–µ—Ä–∞" if t == 0 else f"{t} —Å")
                    ),
                    callback_data=f"st:set:timer:{t}",
                )
            ]
            for t in TIMER_OPTIONS
        ]
        rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="st:menu:root")])
    elif menu == "age":
        buttons = []
        current = game.settings.get("age_level", DEFAULT_AGE_LEVEL)
        for key, data in sorted(AGE_LEVELS.items(), key=lambda item: item[1]["rank"]):
            prefix = SELECTED_MARK if key == current else UNSELECTED_MARK
            buttons.append(
                InlineKeyboardButton(
                    text=f"{prefix} {data['emoji']} {data['title']}",
                    callback_data=f"st:set:age:{key}",
                )
            )
        rows = [[btn] for btn in buttons]
        rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="st:menu:root")])
    elif menu == "category":
        current = game.settings.get("category", DEFAULT_CATEGORY_KEY)
        if current not in CATEGORY_INFO:
            current = DEFAULT_CATEGORY_KEY
            game.settings["category"] = current
        rows = []
        for key, info in CATEGORY_INFO.items():
            prefix = SELECTED_MARK if key == current else UNSELECTED_MARK
            title = info.get("title", key)
            rows.append([
                InlineKeyboardButton(
                    text=f"{prefix} {info['emoji']} {title}",
                    callback_data=f"st:set:category:{key}",
                )
            ])
        rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="st:menu:root")])
    elif menu == "other":
        points_text = (
            "‚≠ê –û—á–∫–∏: " + ("–í–∫–ª" if game.settings.get("points", True) else "–í—ã–∫–ª")
        )
        penalty_text = (
            "‚öñÔ∏è –®—Ç—Ä–∞—Ñ: "
            + ("-1" if game.settings.get("skip_penalty", 0) == -1 else "0")
        )
        rows = [
            [InlineKeyboardButton(text=points_text, callback_data="st:toggle:points")],
            [InlineKeyboardButton(text=penalty_text, callback_data="st:toggle:penalty")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="st:menu:root")],
        ]
    else:
        rows = [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="st:menu:root")]]
    return InlineKeyboardMarkup(inline_keyboard=rows)


async def show_settings_menu(
    game: ChatGame, menu: str = "root", *, message: Optional[Message] = None
):
    text = settings_text(game, menu)
    keyboard = build_settings_keyboard(game, menu)
    target_chat = game.chat_id

    if message:
        try:
            await message.edit_text(text, reply_markup=keyboard)
            game.settings_message_id = message.message_id
            return
        except Exception:
            pass

    if game.settings_message_id:
        try:
            await bot.edit_message_text(
                text,
                chat_id=target_chat,
                message_id=game.settings_message_id,
                reply_markup=keyboard,
            )
            return
        except Exception:
            pass

    sent = await bot.send_message(target_chat, text, reply_markup=keyboard)
    game.settings_message_id = sent.message_id


async def close_settings_menu(game: ChatGame):
    if not game.settings_message_id:
        return
    try:
        await bot.delete_message(game.chat_id, game.settings_message_id)
    except Exception:
        pass
    game.settings_message_id = None


async def join_game(game: ChatGame, user_id: int, full_name: str) -> Tuple[bool, str]:
    if not register_player(game, user_id, full_name):
        return False, "–¢—ã —É–∂–µ –≤ –∏–≥—Ä–µ üòâ"
    await refresh_lobby(game)
    return True, f"{mention_html(user_id, full_name)} –≤–æ—à—ë–ª(–ª–∞) –≤ –∏–≥—Ä—É!"


async def leave_game(game: ChatGame, user_id: int) -> Tuple[bool, str]:
    if is_host(game, user_id):
        return False, "–•–æ—Å—Ç —É–ø—Ä–∞–≤–ª—è–µ—Ç –∏–≥—Ä–æ–π –∏ –Ω–µ –º–æ–∂–µ—Ç –≤—ã–π—Ç–∏. –ò—Å–ø–æ–ª—å–∑—É–π /end."
    if not drop_player(game, user_id):
        return False, "–¢–µ–±—è –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –∏–≥—Ä–æ–∫–æ–≤."
    await refresh_lobby(game)
    if game.in_progress and game.current_turn and game.current_turn.player_id == user_id:
        await handle_skip(game.chat_id, reason="üö™ –ò–≥—Ä–æ–∫ –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É. –•–æ–¥ –ø–µ—Ä–µ–¥–∞–Ω –¥–∞–ª–µ–µ.")
    return True, "–¢—ã –≤—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã."


async def end_game_session(game: ChatGame, reason: str):
    await cancel_timer(game)
    await close_settings_menu(game)
    game.in_progress = False

    if game.vote and game.vote.message_id:
        try:
            await bot.edit_message_text(
                "–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.",
                chat_id=game.chat_id,
                message_id=game.vote.message_id,
            )
        except Exception:
            pass
    game.vote = None

    cleanup_scores(game)
    summary = format_scores(game)
    scoreboard_text = ""
    if game.settings.get("points", True) and game.rounds_played > 0 and game.scores:
        scoreboard_text = f"\n\nüèÜ <b>–§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á—ë—Ç</b>:\n{summary}"
    elif game.scores:
        scoreboard_text = f"\n\nüìä –ò—Ç–æ–≥–∏:\n{summary}"

    await bot.send_message(game.chat_id, f"{reason}{scoreboard_text}")
    GAMES.pop(game.chat_id, None)

def get_deck_for_game(game: ChatGame) -> List[Dict]:
    # —Ñ–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É/–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    selected_age = game.settings.get("age_level", DEFAULT_AGE_LEVEL)
    if selected_age not in AGE_LEVELS:
        selected_age = DEFAULT_AGE_LEVEL
        game.settings["age_level"] = selected_age
    age_rank = AGE_LEVELS[selected_age]["rank"]
    allowed_age = {
        age for age, data in AGE_LEVELS.items() if data["rank"] <= age_rank
    }

    selected_category = game.settings.get("category", DEFAULT_CATEGORY_KEY)
    if selected_category not in CATEGORY_INFO:
        selected_category = DEFAULT_CATEGORY_KEY
        game.settings["category"] = selected_category
    allowed_categories = {selected_category}

    deck = [
        c
        for c in (DEFAULT_DECK + game.extra_deck)
        if c.get("age") in allowed_age and c.get("category") in allowed_categories
    ]
    return deck

def pick_card(game: ChatGame, kind: str) -> Tuple[Optional[Dict], bool]:
    deck = [
        c
        for c in get_deck_for_game(game)
        if c.get("type") == kind and c.get("id") not in game.used_ids
    ]
    restarted = False
    if not deck:
        # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ
        game.used_ids.clear()
        deck = [c for c in get_deck_for_game(game) if c.get("type") == kind]
        restarted = bool(deck)
    if not deck:
        return None, False
    return random.choice(deck), restarted

def lobby_keyboard(game: ChatGame) -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(text="‚ûï –í–æ–π—Ç–∏", callback_data="join"),
            InlineKeyboardButton(text="‚ûñ –í—ã–π—Ç–∏", callback_data="leave"),
        ],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
        [InlineKeyboardButton(text="‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç", callback_data="start")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def turn_choice_keyboard(game: ChatGame, show_end: bool) -> InlineKeyboardMarkup:
    row1 = [
        InlineKeyboardButton(text="üü¶ –ü—Ä–∞–≤–¥–∞", callback_data="truth"),
        InlineKeyboardButton(text="üü• –î–µ–π—Å—Ç–≤–∏–µ", callback_data="dare"),
    ]
    row2 = [InlineKeyboardButton(text="üîÅ –ü—Ä–æ–ø—É—Å–∫", callback_data="skip")]
    row3 = [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]
    rows = [row1, row2, row3]
    if show_end:
        rows.append([InlineKeyboardButton(text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="end")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def task_keyboard(game: ChatGame, for_host: bool) -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data="done"),
         InlineKeyboardButton(text="üîÅ –ü—Ä–æ–ø—É—Å–∫", callback_data="skip")]
    ]
    if for_host:
        rows.append([InlineKeyboardButton(text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="end")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def vote_keyboard(for_host: bool) -> InlineKeyboardMarkup:
    rows = [[
        InlineKeyboardButton(text="üëç –ó–∞—á–µ—Å—Ç—å", callback_data="vote:yes"),
        InlineKeyboardButton(text="üëé –ù–µ –∑–∞—á–µ—Å—Ç—å", callback_data="vote:no"),
    ]]
    if for_host:
        rows.append([
            InlineKeyboardButton(text="‚úÖ –•–æ—Å—Ç: –∑–∞—á–µ—Å—Ç—å", callback_data="host:accept"),
            InlineKeyboardButton(text="‚ùå –•–æ—Å—Ç: –æ—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="host:reject"),
        ])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def ensure_game(chat_id: int) -> Optional[ChatGame]:
    return GAMES.get(chat_id)

async def cancel_timer(game: ChatGame):
    if game and game.timer_task and not game.timer_task.done():
        game.timer_task.cancel()
        try:
            await game.timer_task
        except asyncio.CancelledError:
            pass
        game.timer_task = None

async def start_timer(game: ChatGame, seconds: int, on_expire):
    await cancel_timer(game)
    if seconds <= 0:
        return
    async def _job():
        try:
            await asyncio.sleep(seconds)
            await on_expire()
        except asyncio.CancelledError:
            return
    game.timer_task = asyncio.create_task(_job())

def next_index(game: ChatGame) -> int:
    if not game.players:
        return -1
    # –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ –ø–æ–¥—Ä—è–¥
    game.current_idx = (game.current_idx + 1) % len(game.players)
    return game.current_idx

# ===========================
# –•–ï–ù–î–õ–ï–†–´
# ===========================

@dp.message(CommandStart())
async def on_start(m: Message):
    await m.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∏–≥—Ä–∞ <b>–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –î–µ–π—Å—Ç–≤–∏–µ</b>.\n\n"
        "–°–æ–∑–¥–∞–π –ª–æ–±–±–∏ –∫–æ–º–∞–Ω–¥–æ–π /newgame ‚Äî —Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–Ω–µ—à—å —Ö–æ—Å—Ç–æ–º."
        " –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π –∫–Ω–æ–ø–∫–æ–π ¬´–í–æ–π—Ç–∏¬ª, –∞ –∑–∞—Ç–µ–º –∂–º–∏ ¬´–°—Ç–∞—Ä—Ç¬ª, –∫–æ–≥–¥–∞ –≤—Å–µ –≥–æ—Ç–æ–≤—ã.\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã</b>:\n"
        "‚Ä¢ /newgame ‚Äî —Å–æ–∑–¥–∞—Ç—å –ª–æ–±–±–∏\n"
        "‚Ä¢ /join –∏ /leave ‚Äî –≤–æ–π—Ç–∏ –∏–ª–∏ –≤—ã–π—Ç–∏\n"
        "‚Ä¢ /score ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—á—ë—Ç\n"
        "‚Ä¢ /settings ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—Ç–æ–ª—å–∫–æ —Ö–æ—Å—Ç)\n"
        "‚Ä¢ /end ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É\n"
        "‚Ä¢ /help ‚Äî –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏ –ø—Ä–∞–≤–∏–ª–∞\n"
    )

@dp.message(Command("newgame"))
async def cmd_newgame(m: Message):
    chat_id = m.chat.id
    user_id = m.from_user.id

    existing = GAMES.get(chat_id)
    if existing:
        await end_game_session(existing, "üîÅ –õ–æ–±–±–∏ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ –Ω–æ–≤—ã–º —Ö–æ—Å—Ç–æ–º.")

    game = ChatGame(chat_id=chat_id, host_id=user_id)
    register_player(game, user_id, m.from_user.full_name)
    GAMES[chat_id] = game

    placeholder = await m.answer("üÜï –°–æ–∑–¥–∞—ë–º –ª–æ–±–±–∏...", reply_markup=lobby_keyboard(game))
    await refresh_lobby(game, message=placeholder)

@dp.message(Command("join"))
async def cmd_join(m: Message):
    chat_id = m.chat.id
    game = ensure_game(chat_id)
    if not game:
        await m.answer("–õ–æ–±–±–∏ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /newgame")
        return
    ok, text = await join_game(game, m.from_user.id, m.from_user.full_name)
    await m.answer(f"{'‚úÖ ' if ok else ''}{text}")

@dp.message(Command("leave"))
async def cmd_leave(m: Message):
    chat_id = m.chat.id
    game = ensure_game(chat_id)
    if not game:
        await m.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    ok, text = await leave_game(game, m.from_user.id)
    await m.answer(f"{'‚úÖ ' if ok else ''}{text}")

@dp.message(Command("score"))
async def cmd_score(m: Message):
    chat_id = m.chat.id
    game = ensure_game(chat_id)
    if not game or not game.scores:
        await m.answer("–ü–æ–∫–∞ –Ω–µ—Ç –æ—á–∫–æ–≤.")
        return
    await m.answer("üìä <b>–¢–µ–∫—É—â–∏–π —Å—á—ë—Ç</b>:\n" + format_scores(game))

@dp.message(Command("settings"))
async def cmd_settings(m: Message):
    chat_id = m.chat.id
    game = ensure_game(chat_id)
    if not game:
        await m.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ /newgame")
        return
    await show_settings_menu(game)

@dp.message(Command("end"))
async def cmd_end(m: Message):
    chat_id = m.chat.id
    game = ensure_game(chat_id)
    if not game:
        await m.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    if not is_host(game, m.from_user.id):
        await m.answer("–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É.")
        return
    await end_game_session(game, "üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!")


@dp.message(Command("help"))
async def cmd_help(m: Message):
    await m.answer(
        "‚ÑπÔ∏è <b>–ü—Ä–∞–≤–∏–ª–∞ –∏ –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
        "–°–æ–∑–¥–∞–π –ª–æ–±–±–∏ –∫–æ–º–∞–Ω–¥–æ–π /newgame. –•–æ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∏ –º–æ–∂–µ—Ç –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã—Ö.\n"
        "–ò–≥—Ä–æ–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ /join –∏–ª–∏ –∫–Ω–æ–ø–∫—É ¬´–í–æ–π—Ç–∏¬ª, –≤—ã—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ /leave.\n\n"
        "–ö–æ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã ‚Äî —Ö–æ—Å—Ç –∂–º—ë—Ç ¬´–°—Ç–∞—Ä—Ç¬ª. –ö–∞–∂–¥—ã–π —Ö–æ–¥ –∏–≥—Ä–æ–∫ –≤—ã–±–∏—Ä–∞–µ—Ç <b>–ü—Ä–∞–≤–¥–∞</b> –∏–ª–∏ <b>–î–µ–π—Å—Ç–≤–∏–µ</b>.\n"
        "–í—ã–ø–æ–ª–Ω–∏–ª? –ì–æ–ª–æ—Å—É–π—Ç–µ üëç/üëé –∏–ª–∏ –ø—É—Å—Ç—å —Ö–æ—Å—Ç —Ä–µ—à–∏—Ç.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã: /score ‚Äî —Å—á—ë—Ç, /settings ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–¥–æ—Å—Ç—É–ø–Ω–æ —Ö–æ—Å—Ç—É), /end ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É, /import_deck ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã."
    )

@dp.message(Command("import_deck"))
async def cmd_import_deck(m: Message):
    chat_id = m.chat.id
    game = ensure_game(chat_id)
    if not game:
        await m.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ /newgame")
        return
    if not is_host(game, m.from_user.id):
        await m.answer("–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–æ–¥—É.")
        return
    # –û–∂–∏–¥–∞–µ–º JSON –ø—Ä—è–º–æ –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    # –ü—Ä–∏–º–µ—Ä: /import_deck { "meta":..., "items":[...] }
    args_text = m.text.partition(" ")[2].strip()
    if not args_text:
        await m.answer("–ü—Ä–∏—à–ª–∏ JSON –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä:\n"
                       "/import_deck {\"meta\":{\"lang\":\"ru\",\"version\":1},\"items\":[{...}]}")
        return
    try:
        payload = json.loads(args_text)
        items = payload.get("items", [])
        added = 0
        for it in items:
            if all(k in it for k in ("id","type","category","age","text")) and it["type"] in ("truth","dare"):
                game.extra_deck.append(it)
                added += 1
        await m.answer(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: <b>{added}</b>")
    except Exception as e:
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")

# ===========================
# CALLBACKS (Inline)
# ===========================

@dp.callback_query(F.data == "join")
async def cb_join(c: CallbackQuery):
    chat_id = c.message.chat.id
    game = ensure_game(chat_id)
    if not game:
        await c.answer("–°–Ω–∞—á–∞–ª–∞ /newgame", show_alert=True); return
    ok, text = await join_game(game, c.from_user.id, c.from_user.full_name)
    if ok:
        await c.message.answer(f"‚úÖ {text}")
        await c.answer("–ì–æ—Ç–æ–≤–æ!")
    else:
        await c.answer(text, show_alert=True)

@dp.callback_query(F.data == "leave")
async def cb_leave(c: CallbackQuery):
    chat_id = c.message.chat.id
    game = ensure_game(chat_id)
    if not game:
        await c.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True); return
    ok, text = await leave_game(game, c.from_user.id)
    if ok:
        await c.message.answer(f"‚ÑπÔ∏è {text}")
        await c.answer("–ì–æ—Ç–æ–≤–æ!")
    else:
        await c.answer(text, show_alert=True)

@dp.callback_query(F.data == "start")
async def cb_start(c: CallbackQuery):
    chat_id = c.message.chat.id
    game = ensure_game(chat_id)
    if not game:
        await c.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True); return
    if not is_host(game, c.from_user.id):
        await c.answer("–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å.", show_alert=True); return
    if len(game.players) < 2:
        await c.answer("–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞.", show_alert=True); return

    game.in_progress = True
    game.current_idx = -1
    game.used_ids.clear()
    game.rounds_played = 0
    cleanup_scores(game)
    await close_settings_menu(game)

    await c.message.edit_text("üé≤ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ì–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –ø–µ—Ä–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É.")
    await next_turn(c.message, game)

async def next_turn(msg: Message, game: ChatGame):
    # –æ—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
    await cancel_timer(game)
    # –≤—ã–±–æ—Ä —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    if next_index(game) == -1:
        await msg.answer("–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤. /newgame")
        return
    pl = game.current_player()
    # –º–∏–Ω–∏-—Å–ø–∏–Ω–Ω–µ—Ä
    tmp = await msg.answer("üéØ –í—ã–±–∏—Ä–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞...")
    names = [p.name for p in game.players]
    for _ in range(SPINNER_STEPS):
        nm = random.choice(names)
        await asyncio.sleep(SPINNER_DELAY)
        try:
            await tmp.edit_text(f"üéØ –í—ã–±–∏—Ä–∞–µ–º... <b>{nm}</b>")
        except Exception:
            pass
    await tmp.edit_text(
        f"üëâ –•–æ–¥ –∏–≥—Ä–æ–∫–∞: <b>{pl.name}</b> ({len(game.players)} –∏–≥—Ä–æ–∫–æ–≤)\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {describe_category(game.settings.get('category', DEFAULT_CATEGORY_KEY))} | "
        f"–¢–∞–π–º–µ—Ä: {describe_timer(game.settings.get('timer', 0))}"
    )

    # —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º
    keyboard = turn_choice_keyboard(game, show_end=True)
    sent = await msg.answer(
        f"{mention_html(pl.user_id, pl.name)}, –≤—ã–±–µ—Ä–∏ <b>–ü—Ä–∞–≤–¥–∞</b> –∏–ª–∏ <b>–î–µ–π—Å—Ç–≤–∏–µ</b>.",
        reply_markup=keyboard
    )
    game.current_turn = Turn(player_id=pl.user_id, message_id=sent.message_id)
    game.vote = None

@dp.callback_query(F.data.in_({"truth","dare"}))
async def cb_pick_type(c: CallbackQuery):
    chat_id = c.message.chat.id
    game = ensure_game(chat_id)
    if not game or not game.in_progress:
        await c.answer("–ò–≥—Ä–∞ –Ω–µ –∏–¥—ë—Ç.", show_alert=True); return
    # —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –≤—ã–±–∏—Ä–∞—Ç—å
    turn = game.current_turn
    if not turn or c.from_user.id != turn.player_id:
        await c.answer("–°–µ–π—á–∞—Å —Ö–æ–¥ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞.", show_alert=True); return

    kind = "truth" if c.data == "truth" else "dare"
    card, restarted = pick_card(game, kind)
    if not card:
        await end_game_session(game, "üì¶ –ö–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        await c.answer("–ö–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.", show_alert=True)
        return

    if restarted:
        await bot.send_message(chat_id, "üì¶ –ö–æ–ª–æ–¥–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∞ ‚Äî –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º!")

    game.used_ids.add(card["id"])
    turn.type = kind
    turn.card_id = card["id"]

    # –ü–æ–∫–∞–∑ –∑–∞–¥–∞–Ω–∏—è
    try:
        await c.message.edit_text(
            f"üëâ <b>–•–æ–¥:</b> {mention_html(turn.player_id, '–ò–≥—Ä–æ–∫')}\n"
            f"{'üü¶ –ü—Ä–∞–≤–¥–∞' if kind=='truth' else 'üü• –î–µ–π—Å—Ç–≤–∏–µ'}:\n"
            f"{card['text']}",
            reply_markup=task_keyboard(game, for_host=True)
        )
    except Exception:
        pass

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    async def on_expire():
        # –µ—Å–ª–∏ –∫ —ç—Ç–æ–º—É –º–æ–º–µ–Ω—Ç—É –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ/–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ ‚Äî –∞–≤—Ç–æ–ø—Ä–æ–ø—É—Å–∫
        await handle_skip(chat_id, reason="‚è±Ô∏è –í—Ä–µ–º—è –≤—ã—à–ª–æ ‚Äî –ø—Ä–æ–ø—É—Å–∫.")
    await start_timer(game, game.settings["timer"], on_expire)
    await c.answer()

@dp.callback_query(F.data == "skip")
async def cb_skip(c: CallbackQuery):
    await c.answer()
    await handle_skip(c.message.chat.id, reason="üîÅ –ü—Ä–æ–ø—É—Å–∫.")

async def handle_skip(chat_id: int, reason: str):
    game = ensure_game(chat_id)
    if not game: return
    await cancel_timer(game)
    # —à—Ç—Ä–∞—Ñ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
    penalty_note = ""
    if game.settings["skip_penalty"] == -1 and game.settings["points"] and game.current_turn:
        uid = game.current_turn.player_id
        game.scores[uid] = game.scores.get(uid, 0) - 1
        penalty_note = " (‚àí1 –æ—á–∫–æ)"
    if game.vote and game.vote.message_id:
        try:
            await bot.edit_message_text(
                "–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–æ.",
                chat_id=chat_id,
                message_id=game.vote.message_id,
            )
        except Exception:
            pass
        game.vote = None
    game.rounds_played += 1
    await bot.send_message(chat_id, f"{reason}{penalty_note}")
    await proceed_next(chat_id)

@dp.callback_query(F.data == "done")
async def cb_done(c: CallbackQuery):
    chat_id = c.message.chat.id
    game = ensure_game(chat_id)
    if not game or not game.current_turn:
        await c.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.", show_alert=True); return
    if game.vote:
        await c.answer("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —É–∂–µ –∏–¥—ë—Ç.", show_alert=True)
        return
    # –õ—é–±–æ–π –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
    await cancel_timer(game)
    game.vote = VoteState(yes=set(), no=set())
    text = "üó≥Ô∏è –ó–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ? üëç/üëé"
    vk = vote_keyboard(for_host=True)
    poll = await c.message.answer(text, reply_markup=vk)
    game.vote.message_id = poll.message_id
    await c.answer()

@dp.callback_query(F.data.in_({"vote:yes", "vote:no", "host:accept", "host:reject"}))
async def cb_vote(c: CallbackQuery):
    chat_id = c.message.chat.id
    game = ensure_game(chat_id)
    if not game or not game.vote or not game.current_turn:
        await c.answer(); return

    # –•–æ—Å—Ç —Ä–µ—à–∞–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
    if c.data == "host:accept" and is_host(game, c.from_user.id):
        await finalize_task(chat_id, success=True, by="–•–æ—Å—Ç –∑–∞—á—ë–ª ‚úÖ")
        await c.answer("–ó–∞—Å—á–∏—Ç–∞–Ω–æ —Ö–æ—Å—Ç–æ–º.")
        return
    if c.data == "host:reject" and is_host(game, c.from_user.id):
        await finalize_task(chat_id, success=False, by="–•–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω–∏–ª ‚ùå")
        await c.answer("–ù–µ –∑–∞—Å—á–∏—Ç–∞–Ω–æ —Ö–æ—Å—Ç–æ–º.")
        return

    # –û–±—ã—á–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
    uid = c.from_user.id
    if c.data == "vote:yes":
        game.vote.no.discard(uid)
        game.vote.yes.add(uid)
    else:
        game.vote.yes.discard(uid)
        game.vote.no.add(uid)

    total_players = max(1, len(game.players))
    yes_count, no_count = len(game.vote.yes), len(game.vote.no)
    try:
        await c.message.edit_text(f"üó≥Ô∏è –ì–æ–ª–æ—Å–∞: üëç {yes_count} | üëé {no_count}", reply_markup=vote_keyboard(for_host=True))
    except Exception:
        pass

    # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –µ—Å–ª–∏ üëç > 50% –∏–≥—Ä–æ–∫–æ–≤ ‚Äî —É—Å–ø–µ—Ö; –µ—Å–ª–∏ üëé > 50% ‚Äî –ø—Ä–æ–≤–∞–ª
    if yes_count > total_players / 2:
        await finalize_task(chat_id, success=True, by="‚úÖ –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ó–ê")
    elif no_count > total_players / 2:
        await finalize_task(chat_id, success=False, by="‚ùå –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ü–†–û–¢–ò–í")

    await c.answer()

async def finalize_task(chat_id: int, success: bool, by: str):
    game = ensure_game(chat_id)
    if not game or not game.current_turn: return
    await cancel_timer(game)
    turn = game.current_turn

    # –û—á–∫–∏
    if game.settings["points"] and turn.player_id:
        game.scores.setdefault(turn.player_id, 0)
        if success:
            game.scores[turn.player_id] += 1

    if not game.settings["points"]:
        points_text = "–û—á–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã."
    else:
        points_text = "–û—á–∫–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ!" if success else "–û—á–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π."

    result_text = f"{by}. {points_text}"

    edited = False
    if game.vote and game.vote.message_id:
        try:
            await bot.edit_message_text(
                result_text,
                chat_id=chat_id,
                message_id=game.vote.message_id,
            )
            edited = True
        except Exception:
            pass

    if not edited:
        await bot.send_message(chat_id, result_text)
    game.vote = None
    game.rounds_played += 1
    await proceed_next(chat_id)

async def proceed_next(chat_id: int):
    game = ensure_game(chat_id)
    if not game: return
    if not game.in_progress:
        return
    game.current_turn = None
    await next_turn(await bot.send_message(chat_id, "‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥..."), game)

@dp.callback_query(F.data == "end")
async def cb_end(c: CallbackQuery):
    chat_id = c.message.chat.id
    game = ensure_game(chat_id)
    if not game:
        await c.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True); return
    if not is_host(game, c.from_user.id):
        await c.answer("–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å.", show_alert=True); return
    await end_game_session(game, "üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!")
    await c.answer()

# ====== SETTINGS ======

@dp.callback_query(F.data == "settings")
async def cb_settings(c: CallbackQuery):
    game = ensure_game(c.message.chat.id)
    if not game:
        await c.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True); return
    await show_settings_menu(game)
    await c.answer()

@dp.callback_query(F.data.startswith("st:"))
async def cb_settings_router(c: CallbackQuery):
    game = ensure_game(c.message.chat.id)
    if not game:
        await c.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    parts = c.data.split(":")
    action = parts[1]

    if action == "menu":
        menu = parts[2] if len(parts) > 2 else "root"
        await show_settings_menu(game, menu=menu, message=c.message)
        await c.answer()
        return

    if action == "close":
        await close_settings_menu(game)
        await c.answer("–ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ")
        return

    if not is_host(game, c.from_user.id):
        await c.answer("–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.", show_alert=True)
        return

    if action == "set" and len(parts) >= 4:
        target, value = parts[2], parts[3]
        if target == "timer":
            val = int(value)
            if val not in TIMER_OPTIONS:
                await c.answer("–¢–∞–∫–æ–π —Ç–∞–π–º–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
                return
            game.settings["timer"] = val
            await c.answer("–¢–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª—ë–Ω")
            await show_settings_menu(game, menu="timer", message=c.message)
            return
        if target == "age" and value in AGE_LEVELS:
            game.settings["age_level"] = value
            await c.answer("–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —É—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω—ë–Ω")
            await show_settings_menu(game, menu="age", message=c.message)
            return
        if target == "category" and value in CATEGORY_INFO:
            game.settings["category"] = value
            await c.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            await show_settings_menu(game, menu="category", message=c.message)
            return

    if action == "toggle" and len(parts) >= 3:
        toggle_target = parts[2]
        if toggle_target == "points":
            game.settings["points"] = not game.settings.get("points", True)
            await c.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—á–∫–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–∞")
        elif toggle_target == "penalty":
            game.settings["skip_penalty"] = -1 if game.settings.get("skip_penalty", 0) == 0 else 0
            await c.answer("–®—Ç—Ä–∞—Ñ –æ–±–Ω–æ–≤–ª—ë–Ω")
        await show_settings_menu(game, menu="other", message=c.message)
        return

    await c.answer()

# ===========================
# MAIN
# ===========================

async def main():
    print("‚úÖ Bot is running...")
    await dp.start_polling(bot, allowed_updates=["message", "callback_query"])

if __name__ == "__main__":
    asyncio.run(main())
